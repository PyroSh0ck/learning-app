
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model StudyGuide
 * 
 */
export type StudyGuide = $Result.DefaultSelection<Prisma.$StudyGuidePayload>
/**
 * Model FlashCardSet
 * 
 */
export type FlashCardSet = $Result.DefaultSelection<Prisma.$FlashCardSetPayload>
/**
 * Model FlashCard
 * 
 */
export type FlashCard = $Result.DefaultSelection<Prisma.$FlashCardPayload>
/**
 * Model Video
 * 
 */
export type Video = $Result.DefaultSelection<Prisma.$VideoPayload>
/**
 * Model PracticeQuestion
 * 
 */
export type PracticeQuestion = $Result.DefaultSelection<Prisma.$PracticeQuestionPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const QuestionType: {
  writtenResponse: 'writtenResponse',
  multipleChoice: 'multipleChoice',
  multipleSelect: 'multipleSelect'
};

export type QuestionType = (typeof QuestionType)[keyof typeof QuestionType]

}

export type QuestionType = $Enums.QuestionType

export const QuestionType: typeof $Enums.QuestionType

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.studyGuide`: Exposes CRUD operations for the **StudyGuide** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StudyGuides
    * const studyGuides = await prisma.studyGuide.findMany()
    * ```
    */
  get studyGuide(): Prisma.StudyGuideDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.flashCardSet`: Exposes CRUD operations for the **FlashCardSet** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FlashCardSets
    * const flashCardSets = await prisma.flashCardSet.findMany()
    * ```
    */
  get flashCardSet(): Prisma.FlashCardSetDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.flashCard`: Exposes CRUD operations for the **FlashCard** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FlashCards
    * const flashCards = await prisma.flashCard.findMany()
    * ```
    */
  get flashCard(): Prisma.FlashCardDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.video`: Exposes CRUD operations for the **Video** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Videos
    * const videos = await prisma.video.findMany()
    * ```
    */
  get video(): Prisma.VideoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.practiceQuestion`: Exposes CRUD operations for the **PracticeQuestion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PracticeQuestions
    * const practiceQuestions = await prisma.practiceQuestion.findMany()
    * ```
    */
  get practiceQuestion(): Prisma.PracticeQuestionDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.11.1
   * Query Engine version: f40f79ec31188888a2e33acda0ecc8fd10a853a9
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    StudyGuide: 'StudyGuide',
    FlashCardSet: 'FlashCardSet',
    FlashCard: 'FlashCard',
    Video: 'Video',
    PracticeQuestion: 'PracticeQuestion'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "studyGuide" | "flashCardSet" | "flashCard" | "video" | "practiceQuestion"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      StudyGuide: {
        payload: Prisma.$StudyGuidePayload<ExtArgs>
        fields: Prisma.StudyGuideFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StudyGuideFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyGuidePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StudyGuideFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyGuidePayload>
          }
          findFirst: {
            args: Prisma.StudyGuideFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyGuidePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StudyGuideFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyGuidePayload>
          }
          findMany: {
            args: Prisma.StudyGuideFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyGuidePayload>[]
          }
          create: {
            args: Prisma.StudyGuideCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyGuidePayload>
          }
          createMany: {
            args: Prisma.StudyGuideCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StudyGuideCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyGuidePayload>[]
          }
          delete: {
            args: Prisma.StudyGuideDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyGuidePayload>
          }
          update: {
            args: Prisma.StudyGuideUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyGuidePayload>
          }
          deleteMany: {
            args: Prisma.StudyGuideDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StudyGuideUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StudyGuideUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyGuidePayload>[]
          }
          upsert: {
            args: Prisma.StudyGuideUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyGuidePayload>
          }
          aggregate: {
            args: Prisma.StudyGuideAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStudyGuide>
          }
          groupBy: {
            args: Prisma.StudyGuideGroupByArgs<ExtArgs>
            result: $Utils.Optional<StudyGuideGroupByOutputType>[]
          }
          count: {
            args: Prisma.StudyGuideCountArgs<ExtArgs>
            result: $Utils.Optional<StudyGuideCountAggregateOutputType> | number
          }
        }
      }
      FlashCardSet: {
        payload: Prisma.$FlashCardSetPayload<ExtArgs>
        fields: Prisma.FlashCardSetFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FlashCardSetFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlashCardSetPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FlashCardSetFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlashCardSetPayload>
          }
          findFirst: {
            args: Prisma.FlashCardSetFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlashCardSetPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FlashCardSetFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlashCardSetPayload>
          }
          findMany: {
            args: Prisma.FlashCardSetFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlashCardSetPayload>[]
          }
          create: {
            args: Prisma.FlashCardSetCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlashCardSetPayload>
          }
          createMany: {
            args: Prisma.FlashCardSetCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FlashCardSetCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlashCardSetPayload>[]
          }
          delete: {
            args: Prisma.FlashCardSetDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlashCardSetPayload>
          }
          update: {
            args: Prisma.FlashCardSetUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlashCardSetPayload>
          }
          deleteMany: {
            args: Prisma.FlashCardSetDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FlashCardSetUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FlashCardSetUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlashCardSetPayload>[]
          }
          upsert: {
            args: Prisma.FlashCardSetUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlashCardSetPayload>
          }
          aggregate: {
            args: Prisma.FlashCardSetAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFlashCardSet>
          }
          groupBy: {
            args: Prisma.FlashCardSetGroupByArgs<ExtArgs>
            result: $Utils.Optional<FlashCardSetGroupByOutputType>[]
          }
          count: {
            args: Prisma.FlashCardSetCountArgs<ExtArgs>
            result: $Utils.Optional<FlashCardSetCountAggregateOutputType> | number
          }
        }
      }
      FlashCard: {
        payload: Prisma.$FlashCardPayload<ExtArgs>
        fields: Prisma.FlashCardFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FlashCardFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlashCardPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FlashCardFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlashCardPayload>
          }
          findFirst: {
            args: Prisma.FlashCardFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlashCardPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FlashCardFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlashCardPayload>
          }
          findMany: {
            args: Prisma.FlashCardFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlashCardPayload>[]
          }
          create: {
            args: Prisma.FlashCardCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlashCardPayload>
          }
          createMany: {
            args: Prisma.FlashCardCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FlashCardCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlashCardPayload>[]
          }
          delete: {
            args: Prisma.FlashCardDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlashCardPayload>
          }
          update: {
            args: Prisma.FlashCardUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlashCardPayload>
          }
          deleteMany: {
            args: Prisma.FlashCardDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FlashCardUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FlashCardUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlashCardPayload>[]
          }
          upsert: {
            args: Prisma.FlashCardUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlashCardPayload>
          }
          aggregate: {
            args: Prisma.FlashCardAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFlashCard>
          }
          groupBy: {
            args: Prisma.FlashCardGroupByArgs<ExtArgs>
            result: $Utils.Optional<FlashCardGroupByOutputType>[]
          }
          count: {
            args: Prisma.FlashCardCountArgs<ExtArgs>
            result: $Utils.Optional<FlashCardCountAggregateOutputType> | number
          }
        }
      }
      Video: {
        payload: Prisma.$VideoPayload<ExtArgs>
        fields: Prisma.VideoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VideoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VideoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VideoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VideoPayload>
          }
          findFirst: {
            args: Prisma.VideoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VideoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VideoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VideoPayload>
          }
          findMany: {
            args: Prisma.VideoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VideoPayload>[]
          }
          create: {
            args: Prisma.VideoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VideoPayload>
          }
          createMany: {
            args: Prisma.VideoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VideoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VideoPayload>[]
          }
          delete: {
            args: Prisma.VideoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VideoPayload>
          }
          update: {
            args: Prisma.VideoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VideoPayload>
          }
          deleteMany: {
            args: Prisma.VideoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VideoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.VideoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VideoPayload>[]
          }
          upsert: {
            args: Prisma.VideoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VideoPayload>
          }
          aggregate: {
            args: Prisma.VideoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVideo>
          }
          groupBy: {
            args: Prisma.VideoGroupByArgs<ExtArgs>
            result: $Utils.Optional<VideoGroupByOutputType>[]
          }
          count: {
            args: Prisma.VideoCountArgs<ExtArgs>
            result: $Utils.Optional<VideoCountAggregateOutputType> | number
          }
        }
      }
      PracticeQuestion: {
        payload: Prisma.$PracticeQuestionPayload<ExtArgs>
        fields: Prisma.PracticeQuestionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PracticeQuestionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticeQuestionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PracticeQuestionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticeQuestionPayload>
          }
          findFirst: {
            args: Prisma.PracticeQuestionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticeQuestionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PracticeQuestionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticeQuestionPayload>
          }
          findMany: {
            args: Prisma.PracticeQuestionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticeQuestionPayload>[]
          }
          create: {
            args: Prisma.PracticeQuestionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticeQuestionPayload>
          }
          createMany: {
            args: Prisma.PracticeQuestionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PracticeQuestionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticeQuestionPayload>[]
          }
          delete: {
            args: Prisma.PracticeQuestionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticeQuestionPayload>
          }
          update: {
            args: Prisma.PracticeQuestionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticeQuestionPayload>
          }
          deleteMany: {
            args: Prisma.PracticeQuestionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PracticeQuestionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PracticeQuestionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticeQuestionPayload>[]
          }
          upsert: {
            args: Prisma.PracticeQuestionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticeQuestionPayload>
          }
          aggregate: {
            args: Prisma.PracticeQuestionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePracticeQuestion>
          }
          groupBy: {
            args: Prisma.PracticeQuestionGroupByArgs<ExtArgs>
            result: $Utils.Optional<PracticeQuestionGroupByOutputType>[]
          }
          count: {
            args: Prisma.PracticeQuestionCountArgs<ExtArgs>
            result: $Utils.Optional<PracticeQuestionCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    studyGuide?: StudyGuideOmit
    flashCardSet?: FlashCardSetOmit
    flashCard?: FlashCardOmit
    video?: VideoOmit
    practiceQuestion?: PracticeQuestionOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    studyguides: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    studyguides?: boolean | UserCountOutputTypeCountStudyguidesArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountStudyguidesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudyGuideWhereInput
  }


  /**
   * Count Type StudyGuideCountOutputType
   */

  export type StudyGuideCountOutputType = {
    flashCardSets: number
  }

  export type StudyGuideCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    flashCardSets?: boolean | StudyGuideCountOutputTypeCountFlashCardSetsArgs
  }

  // Custom InputTypes
  /**
   * StudyGuideCountOutputType without action
   */
  export type StudyGuideCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyGuideCountOutputType
     */
    select?: StudyGuideCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StudyGuideCountOutputType without action
   */
  export type StudyGuideCountOutputTypeCountFlashCardSetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FlashCardSetWhereInput
  }


  /**
   * Count Type FlashCardSetCountOutputType
   */

  export type FlashCardSetCountOutputType = {
    flashCards: number
    videos: number
    practiceQuestions: number
  }

  export type FlashCardSetCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    flashCards?: boolean | FlashCardSetCountOutputTypeCountFlashCardsArgs
    videos?: boolean | FlashCardSetCountOutputTypeCountVideosArgs
    practiceQuestions?: boolean | FlashCardSetCountOutputTypeCountPracticeQuestionsArgs
  }

  // Custom InputTypes
  /**
   * FlashCardSetCountOutputType without action
   */
  export type FlashCardSetCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlashCardSetCountOutputType
     */
    select?: FlashCardSetCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FlashCardSetCountOutputType without action
   */
  export type FlashCardSetCountOutputTypeCountFlashCardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FlashCardWhereInput
  }

  /**
   * FlashCardSetCountOutputType without action
   */
  export type FlashCardSetCountOutputTypeCountVideosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VideoWhereInput
  }

  /**
   * FlashCardSetCountOutputType without action
   */
  export type FlashCardSetCountOutputTypeCountPracticeQuestionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PracticeQuestionWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    username: string | null
    password: string | null
    dateCreated: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    username: string | null
    password: string | null
    dateCreated: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    username: number
    password: number
    dateCreated: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    username?: true
    password?: true
    dateCreated?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    username?: true
    password?: true
    dateCreated?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    username?: true
    password?: true
    dateCreated?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    username: string
    password: string
    dateCreated: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    username?: boolean
    password?: boolean
    dateCreated?: boolean
    studyguides?: boolean | User$studyguidesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    username?: boolean
    password?: boolean
    dateCreated?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    username?: boolean
    password?: boolean
    dateCreated?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    username?: boolean
    password?: boolean
    dateCreated?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "username" | "password" | "dateCreated", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    studyguides?: boolean | User$studyguidesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      studyguides: Prisma.$StudyGuidePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      username: string
      password: string
      dateCreated: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    studyguides<T extends User$studyguidesArgs<ExtArgs> = {}>(args?: Subset<T, User$studyguidesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudyGuidePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly dateCreated: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.studyguides
   */
  export type User$studyguidesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyGuide
     */
    select?: StudyGuideSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudyGuide
     */
    omit?: StudyGuideOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyGuideInclude<ExtArgs> | null
    where?: StudyGuideWhereInput
    orderBy?: StudyGuideOrderByWithRelationInput | StudyGuideOrderByWithRelationInput[]
    cursor?: StudyGuideWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudyGuideScalarFieldEnum | StudyGuideScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model StudyGuide
   */

  export type AggregateStudyGuide = {
    _count: StudyGuideCountAggregateOutputType | null
    _min: StudyGuideMinAggregateOutputType | null
    _max: StudyGuideMaxAggregateOutputType | null
  }

  export type StudyGuideMinAggregateOutputType = {
    id: string | null
    tag: string | null
    name: string | null
    dateCreated: Date | null
    lastModified: Date | null
    completedBy: Date | null
    completed: boolean | null
    userID: string | null
  }

  export type StudyGuideMaxAggregateOutputType = {
    id: string | null
    tag: string | null
    name: string | null
    dateCreated: Date | null
    lastModified: Date | null
    completedBy: Date | null
    completed: boolean | null
    userID: string | null
  }

  export type StudyGuideCountAggregateOutputType = {
    id: number
    tag: number
    name: number
    dateCreated: number
    lastModified: number
    completedBy: number
    completed: number
    userID: number
    _all: number
  }


  export type StudyGuideMinAggregateInputType = {
    id?: true
    tag?: true
    name?: true
    dateCreated?: true
    lastModified?: true
    completedBy?: true
    completed?: true
    userID?: true
  }

  export type StudyGuideMaxAggregateInputType = {
    id?: true
    tag?: true
    name?: true
    dateCreated?: true
    lastModified?: true
    completedBy?: true
    completed?: true
    userID?: true
  }

  export type StudyGuideCountAggregateInputType = {
    id?: true
    tag?: true
    name?: true
    dateCreated?: true
    lastModified?: true
    completedBy?: true
    completed?: true
    userID?: true
    _all?: true
  }

  export type StudyGuideAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudyGuide to aggregate.
     */
    where?: StudyGuideWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudyGuides to fetch.
     */
    orderBy?: StudyGuideOrderByWithRelationInput | StudyGuideOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StudyGuideWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudyGuides from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudyGuides.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StudyGuides
    **/
    _count?: true | StudyGuideCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudyGuideMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudyGuideMaxAggregateInputType
  }

  export type GetStudyGuideAggregateType<T extends StudyGuideAggregateArgs> = {
        [P in keyof T & keyof AggregateStudyGuide]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudyGuide[P]>
      : GetScalarType<T[P], AggregateStudyGuide[P]>
  }




  export type StudyGuideGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudyGuideWhereInput
    orderBy?: StudyGuideOrderByWithAggregationInput | StudyGuideOrderByWithAggregationInput[]
    by: StudyGuideScalarFieldEnum[] | StudyGuideScalarFieldEnum
    having?: StudyGuideScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudyGuideCountAggregateInputType | true
    _min?: StudyGuideMinAggregateInputType
    _max?: StudyGuideMaxAggregateInputType
  }

  export type StudyGuideGroupByOutputType = {
    id: string
    tag: string | null
    name: string
    dateCreated: Date
    lastModified: Date
    completedBy: Date | null
    completed: boolean
    userID: string
    _count: StudyGuideCountAggregateOutputType | null
    _min: StudyGuideMinAggregateOutputType | null
    _max: StudyGuideMaxAggregateOutputType | null
  }

  type GetStudyGuideGroupByPayload<T extends StudyGuideGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudyGuideGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudyGuideGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudyGuideGroupByOutputType[P]>
            : GetScalarType<T[P], StudyGuideGroupByOutputType[P]>
        }
      >
    >


  export type StudyGuideSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tag?: boolean
    name?: boolean
    dateCreated?: boolean
    lastModified?: boolean
    completedBy?: boolean
    completed?: boolean
    userID?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    flashCardSets?: boolean | StudyGuide$flashCardSetsArgs<ExtArgs>
    _count?: boolean | StudyGuideCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studyGuide"]>

  export type StudyGuideSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tag?: boolean
    name?: boolean
    dateCreated?: boolean
    lastModified?: boolean
    completedBy?: boolean
    completed?: boolean
    userID?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studyGuide"]>

  export type StudyGuideSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tag?: boolean
    name?: boolean
    dateCreated?: boolean
    lastModified?: boolean
    completedBy?: boolean
    completed?: boolean
    userID?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studyGuide"]>

  export type StudyGuideSelectScalar = {
    id?: boolean
    tag?: boolean
    name?: boolean
    dateCreated?: boolean
    lastModified?: boolean
    completedBy?: boolean
    completed?: boolean
    userID?: boolean
  }

  export type StudyGuideOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "tag" | "name" | "dateCreated" | "lastModified" | "completedBy" | "completed" | "userID", ExtArgs["result"]["studyGuide"]>
  export type StudyGuideInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    flashCardSets?: boolean | StudyGuide$flashCardSetsArgs<ExtArgs>
    _count?: boolean | StudyGuideCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type StudyGuideIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type StudyGuideIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $StudyGuidePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StudyGuide"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      flashCardSets: Prisma.$FlashCardSetPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tag: string | null
      name: string
      dateCreated: Date
      lastModified: Date
      completedBy: Date | null
      completed: boolean
      userID: string
    }, ExtArgs["result"]["studyGuide"]>
    composites: {}
  }

  type StudyGuideGetPayload<S extends boolean | null | undefined | StudyGuideDefaultArgs> = $Result.GetResult<Prisma.$StudyGuidePayload, S>

  type StudyGuideCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StudyGuideFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StudyGuideCountAggregateInputType | true
    }

  export interface StudyGuideDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StudyGuide'], meta: { name: 'StudyGuide' } }
    /**
     * Find zero or one StudyGuide that matches the filter.
     * @param {StudyGuideFindUniqueArgs} args - Arguments to find a StudyGuide
     * @example
     * // Get one StudyGuide
     * const studyGuide = await prisma.studyGuide.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StudyGuideFindUniqueArgs>(args: SelectSubset<T, StudyGuideFindUniqueArgs<ExtArgs>>): Prisma__StudyGuideClient<$Result.GetResult<Prisma.$StudyGuidePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one StudyGuide that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StudyGuideFindUniqueOrThrowArgs} args - Arguments to find a StudyGuide
     * @example
     * // Get one StudyGuide
     * const studyGuide = await prisma.studyGuide.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StudyGuideFindUniqueOrThrowArgs>(args: SelectSubset<T, StudyGuideFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StudyGuideClient<$Result.GetResult<Prisma.$StudyGuidePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StudyGuide that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudyGuideFindFirstArgs} args - Arguments to find a StudyGuide
     * @example
     * // Get one StudyGuide
     * const studyGuide = await prisma.studyGuide.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StudyGuideFindFirstArgs>(args?: SelectSubset<T, StudyGuideFindFirstArgs<ExtArgs>>): Prisma__StudyGuideClient<$Result.GetResult<Prisma.$StudyGuidePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StudyGuide that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudyGuideFindFirstOrThrowArgs} args - Arguments to find a StudyGuide
     * @example
     * // Get one StudyGuide
     * const studyGuide = await prisma.studyGuide.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StudyGuideFindFirstOrThrowArgs>(args?: SelectSubset<T, StudyGuideFindFirstOrThrowArgs<ExtArgs>>): Prisma__StudyGuideClient<$Result.GetResult<Prisma.$StudyGuidePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more StudyGuides that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudyGuideFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StudyGuides
     * const studyGuides = await prisma.studyGuide.findMany()
     * 
     * // Get first 10 StudyGuides
     * const studyGuides = await prisma.studyGuide.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const studyGuideWithIdOnly = await prisma.studyGuide.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StudyGuideFindManyArgs>(args?: SelectSubset<T, StudyGuideFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudyGuidePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a StudyGuide.
     * @param {StudyGuideCreateArgs} args - Arguments to create a StudyGuide.
     * @example
     * // Create one StudyGuide
     * const StudyGuide = await prisma.studyGuide.create({
     *   data: {
     *     // ... data to create a StudyGuide
     *   }
     * })
     * 
     */
    create<T extends StudyGuideCreateArgs>(args: SelectSubset<T, StudyGuideCreateArgs<ExtArgs>>): Prisma__StudyGuideClient<$Result.GetResult<Prisma.$StudyGuidePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many StudyGuides.
     * @param {StudyGuideCreateManyArgs} args - Arguments to create many StudyGuides.
     * @example
     * // Create many StudyGuides
     * const studyGuide = await prisma.studyGuide.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StudyGuideCreateManyArgs>(args?: SelectSubset<T, StudyGuideCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StudyGuides and returns the data saved in the database.
     * @param {StudyGuideCreateManyAndReturnArgs} args - Arguments to create many StudyGuides.
     * @example
     * // Create many StudyGuides
     * const studyGuide = await prisma.studyGuide.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StudyGuides and only return the `id`
     * const studyGuideWithIdOnly = await prisma.studyGuide.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StudyGuideCreateManyAndReturnArgs>(args?: SelectSubset<T, StudyGuideCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudyGuidePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a StudyGuide.
     * @param {StudyGuideDeleteArgs} args - Arguments to delete one StudyGuide.
     * @example
     * // Delete one StudyGuide
     * const StudyGuide = await prisma.studyGuide.delete({
     *   where: {
     *     // ... filter to delete one StudyGuide
     *   }
     * })
     * 
     */
    delete<T extends StudyGuideDeleteArgs>(args: SelectSubset<T, StudyGuideDeleteArgs<ExtArgs>>): Prisma__StudyGuideClient<$Result.GetResult<Prisma.$StudyGuidePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one StudyGuide.
     * @param {StudyGuideUpdateArgs} args - Arguments to update one StudyGuide.
     * @example
     * // Update one StudyGuide
     * const studyGuide = await prisma.studyGuide.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StudyGuideUpdateArgs>(args: SelectSubset<T, StudyGuideUpdateArgs<ExtArgs>>): Prisma__StudyGuideClient<$Result.GetResult<Prisma.$StudyGuidePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more StudyGuides.
     * @param {StudyGuideDeleteManyArgs} args - Arguments to filter StudyGuides to delete.
     * @example
     * // Delete a few StudyGuides
     * const { count } = await prisma.studyGuide.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StudyGuideDeleteManyArgs>(args?: SelectSubset<T, StudyGuideDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StudyGuides.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudyGuideUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StudyGuides
     * const studyGuide = await prisma.studyGuide.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StudyGuideUpdateManyArgs>(args: SelectSubset<T, StudyGuideUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StudyGuides and returns the data updated in the database.
     * @param {StudyGuideUpdateManyAndReturnArgs} args - Arguments to update many StudyGuides.
     * @example
     * // Update many StudyGuides
     * const studyGuide = await prisma.studyGuide.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more StudyGuides and only return the `id`
     * const studyGuideWithIdOnly = await prisma.studyGuide.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StudyGuideUpdateManyAndReturnArgs>(args: SelectSubset<T, StudyGuideUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudyGuidePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one StudyGuide.
     * @param {StudyGuideUpsertArgs} args - Arguments to update or create a StudyGuide.
     * @example
     * // Update or create a StudyGuide
     * const studyGuide = await prisma.studyGuide.upsert({
     *   create: {
     *     // ... data to create a StudyGuide
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StudyGuide we want to update
     *   }
     * })
     */
    upsert<T extends StudyGuideUpsertArgs>(args: SelectSubset<T, StudyGuideUpsertArgs<ExtArgs>>): Prisma__StudyGuideClient<$Result.GetResult<Prisma.$StudyGuidePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of StudyGuides.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudyGuideCountArgs} args - Arguments to filter StudyGuides to count.
     * @example
     * // Count the number of StudyGuides
     * const count = await prisma.studyGuide.count({
     *   where: {
     *     // ... the filter for the StudyGuides we want to count
     *   }
     * })
    **/
    count<T extends StudyGuideCountArgs>(
      args?: Subset<T, StudyGuideCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudyGuideCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StudyGuide.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudyGuideAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudyGuideAggregateArgs>(args: Subset<T, StudyGuideAggregateArgs>): Prisma.PrismaPromise<GetStudyGuideAggregateType<T>>

    /**
     * Group by StudyGuide.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudyGuideGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudyGuideGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudyGuideGroupByArgs['orderBy'] }
        : { orderBy?: StudyGuideGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudyGuideGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudyGuideGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StudyGuide model
   */
  readonly fields: StudyGuideFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StudyGuide.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StudyGuideClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    flashCardSets<T extends StudyGuide$flashCardSetsArgs<ExtArgs> = {}>(args?: Subset<T, StudyGuide$flashCardSetsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FlashCardSetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StudyGuide model
   */
  interface StudyGuideFieldRefs {
    readonly id: FieldRef<"StudyGuide", 'String'>
    readonly tag: FieldRef<"StudyGuide", 'String'>
    readonly name: FieldRef<"StudyGuide", 'String'>
    readonly dateCreated: FieldRef<"StudyGuide", 'DateTime'>
    readonly lastModified: FieldRef<"StudyGuide", 'DateTime'>
    readonly completedBy: FieldRef<"StudyGuide", 'DateTime'>
    readonly completed: FieldRef<"StudyGuide", 'Boolean'>
    readonly userID: FieldRef<"StudyGuide", 'String'>
  }
    

  // Custom InputTypes
  /**
   * StudyGuide findUnique
   */
  export type StudyGuideFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyGuide
     */
    select?: StudyGuideSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudyGuide
     */
    omit?: StudyGuideOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyGuideInclude<ExtArgs> | null
    /**
     * Filter, which StudyGuide to fetch.
     */
    where: StudyGuideWhereUniqueInput
  }

  /**
   * StudyGuide findUniqueOrThrow
   */
  export type StudyGuideFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyGuide
     */
    select?: StudyGuideSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudyGuide
     */
    omit?: StudyGuideOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyGuideInclude<ExtArgs> | null
    /**
     * Filter, which StudyGuide to fetch.
     */
    where: StudyGuideWhereUniqueInput
  }

  /**
   * StudyGuide findFirst
   */
  export type StudyGuideFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyGuide
     */
    select?: StudyGuideSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudyGuide
     */
    omit?: StudyGuideOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyGuideInclude<ExtArgs> | null
    /**
     * Filter, which StudyGuide to fetch.
     */
    where?: StudyGuideWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudyGuides to fetch.
     */
    orderBy?: StudyGuideOrderByWithRelationInput | StudyGuideOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudyGuides.
     */
    cursor?: StudyGuideWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudyGuides from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudyGuides.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudyGuides.
     */
    distinct?: StudyGuideScalarFieldEnum | StudyGuideScalarFieldEnum[]
  }

  /**
   * StudyGuide findFirstOrThrow
   */
  export type StudyGuideFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyGuide
     */
    select?: StudyGuideSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudyGuide
     */
    omit?: StudyGuideOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyGuideInclude<ExtArgs> | null
    /**
     * Filter, which StudyGuide to fetch.
     */
    where?: StudyGuideWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudyGuides to fetch.
     */
    orderBy?: StudyGuideOrderByWithRelationInput | StudyGuideOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudyGuides.
     */
    cursor?: StudyGuideWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudyGuides from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudyGuides.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudyGuides.
     */
    distinct?: StudyGuideScalarFieldEnum | StudyGuideScalarFieldEnum[]
  }

  /**
   * StudyGuide findMany
   */
  export type StudyGuideFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyGuide
     */
    select?: StudyGuideSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudyGuide
     */
    omit?: StudyGuideOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyGuideInclude<ExtArgs> | null
    /**
     * Filter, which StudyGuides to fetch.
     */
    where?: StudyGuideWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudyGuides to fetch.
     */
    orderBy?: StudyGuideOrderByWithRelationInput | StudyGuideOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StudyGuides.
     */
    cursor?: StudyGuideWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudyGuides from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudyGuides.
     */
    skip?: number
    distinct?: StudyGuideScalarFieldEnum | StudyGuideScalarFieldEnum[]
  }

  /**
   * StudyGuide create
   */
  export type StudyGuideCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyGuide
     */
    select?: StudyGuideSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudyGuide
     */
    omit?: StudyGuideOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyGuideInclude<ExtArgs> | null
    /**
     * The data needed to create a StudyGuide.
     */
    data: XOR<StudyGuideCreateInput, StudyGuideUncheckedCreateInput>
  }

  /**
   * StudyGuide createMany
   */
  export type StudyGuideCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StudyGuides.
     */
    data: StudyGuideCreateManyInput | StudyGuideCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StudyGuide createManyAndReturn
   */
  export type StudyGuideCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyGuide
     */
    select?: StudyGuideSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StudyGuide
     */
    omit?: StudyGuideOmit<ExtArgs> | null
    /**
     * The data used to create many StudyGuides.
     */
    data: StudyGuideCreateManyInput | StudyGuideCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyGuideIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * StudyGuide update
   */
  export type StudyGuideUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyGuide
     */
    select?: StudyGuideSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudyGuide
     */
    omit?: StudyGuideOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyGuideInclude<ExtArgs> | null
    /**
     * The data needed to update a StudyGuide.
     */
    data: XOR<StudyGuideUpdateInput, StudyGuideUncheckedUpdateInput>
    /**
     * Choose, which StudyGuide to update.
     */
    where: StudyGuideWhereUniqueInput
  }

  /**
   * StudyGuide updateMany
   */
  export type StudyGuideUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StudyGuides.
     */
    data: XOR<StudyGuideUpdateManyMutationInput, StudyGuideUncheckedUpdateManyInput>
    /**
     * Filter which StudyGuides to update
     */
    where?: StudyGuideWhereInput
    /**
     * Limit how many StudyGuides to update.
     */
    limit?: number
  }

  /**
   * StudyGuide updateManyAndReturn
   */
  export type StudyGuideUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyGuide
     */
    select?: StudyGuideSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StudyGuide
     */
    omit?: StudyGuideOmit<ExtArgs> | null
    /**
     * The data used to update StudyGuides.
     */
    data: XOR<StudyGuideUpdateManyMutationInput, StudyGuideUncheckedUpdateManyInput>
    /**
     * Filter which StudyGuides to update
     */
    where?: StudyGuideWhereInput
    /**
     * Limit how many StudyGuides to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyGuideIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * StudyGuide upsert
   */
  export type StudyGuideUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyGuide
     */
    select?: StudyGuideSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudyGuide
     */
    omit?: StudyGuideOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyGuideInclude<ExtArgs> | null
    /**
     * The filter to search for the StudyGuide to update in case it exists.
     */
    where: StudyGuideWhereUniqueInput
    /**
     * In case the StudyGuide found by the `where` argument doesn't exist, create a new StudyGuide with this data.
     */
    create: XOR<StudyGuideCreateInput, StudyGuideUncheckedCreateInput>
    /**
     * In case the StudyGuide was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StudyGuideUpdateInput, StudyGuideUncheckedUpdateInput>
  }

  /**
   * StudyGuide delete
   */
  export type StudyGuideDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyGuide
     */
    select?: StudyGuideSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudyGuide
     */
    omit?: StudyGuideOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyGuideInclude<ExtArgs> | null
    /**
     * Filter which StudyGuide to delete.
     */
    where: StudyGuideWhereUniqueInput
  }

  /**
   * StudyGuide deleteMany
   */
  export type StudyGuideDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudyGuides to delete
     */
    where?: StudyGuideWhereInput
    /**
     * Limit how many StudyGuides to delete.
     */
    limit?: number
  }

  /**
   * StudyGuide.flashCardSets
   */
  export type StudyGuide$flashCardSetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlashCardSet
     */
    select?: FlashCardSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlashCardSet
     */
    omit?: FlashCardSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlashCardSetInclude<ExtArgs> | null
    where?: FlashCardSetWhereInput
    orderBy?: FlashCardSetOrderByWithRelationInput | FlashCardSetOrderByWithRelationInput[]
    cursor?: FlashCardSetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FlashCardSetScalarFieldEnum | FlashCardSetScalarFieldEnum[]
  }

  /**
   * StudyGuide without action
   */
  export type StudyGuideDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyGuide
     */
    select?: StudyGuideSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudyGuide
     */
    omit?: StudyGuideOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyGuideInclude<ExtArgs> | null
  }


  /**
   * Model FlashCardSet
   */

  export type AggregateFlashCardSet = {
    _count: FlashCardSetCountAggregateOutputType | null
    _min: FlashCardSetMinAggregateOutputType | null
    _max: FlashCardSetMaxAggregateOutputType | null
  }

  export type FlashCardSetMinAggregateOutputType = {
    id: string | null
    name: string | null
    tag: string | null
    dateCreated: Date | null
    lastModified: Date | null
    studyGuideID: string | null
  }

  export type FlashCardSetMaxAggregateOutputType = {
    id: string | null
    name: string | null
    tag: string | null
    dateCreated: Date | null
    lastModified: Date | null
    studyGuideID: string | null
  }

  export type FlashCardSetCountAggregateOutputType = {
    id: number
    name: number
    tag: number
    dateCreated: number
    lastModified: number
    studyGuideID: number
    _all: number
  }


  export type FlashCardSetMinAggregateInputType = {
    id?: true
    name?: true
    tag?: true
    dateCreated?: true
    lastModified?: true
    studyGuideID?: true
  }

  export type FlashCardSetMaxAggregateInputType = {
    id?: true
    name?: true
    tag?: true
    dateCreated?: true
    lastModified?: true
    studyGuideID?: true
  }

  export type FlashCardSetCountAggregateInputType = {
    id?: true
    name?: true
    tag?: true
    dateCreated?: true
    lastModified?: true
    studyGuideID?: true
    _all?: true
  }

  export type FlashCardSetAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FlashCardSet to aggregate.
     */
    where?: FlashCardSetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FlashCardSets to fetch.
     */
    orderBy?: FlashCardSetOrderByWithRelationInput | FlashCardSetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FlashCardSetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FlashCardSets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FlashCardSets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FlashCardSets
    **/
    _count?: true | FlashCardSetCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FlashCardSetMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FlashCardSetMaxAggregateInputType
  }

  export type GetFlashCardSetAggregateType<T extends FlashCardSetAggregateArgs> = {
        [P in keyof T & keyof AggregateFlashCardSet]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFlashCardSet[P]>
      : GetScalarType<T[P], AggregateFlashCardSet[P]>
  }




  export type FlashCardSetGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FlashCardSetWhereInput
    orderBy?: FlashCardSetOrderByWithAggregationInput | FlashCardSetOrderByWithAggregationInput[]
    by: FlashCardSetScalarFieldEnum[] | FlashCardSetScalarFieldEnum
    having?: FlashCardSetScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FlashCardSetCountAggregateInputType | true
    _min?: FlashCardSetMinAggregateInputType
    _max?: FlashCardSetMaxAggregateInputType
  }

  export type FlashCardSetGroupByOutputType = {
    id: string
    name: string
    tag: string | null
    dateCreated: Date
    lastModified: Date
    studyGuideID: string
    _count: FlashCardSetCountAggregateOutputType | null
    _min: FlashCardSetMinAggregateOutputType | null
    _max: FlashCardSetMaxAggregateOutputType | null
  }

  type GetFlashCardSetGroupByPayload<T extends FlashCardSetGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FlashCardSetGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FlashCardSetGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FlashCardSetGroupByOutputType[P]>
            : GetScalarType<T[P], FlashCardSetGroupByOutputType[P]>
        }
      >
    >


  export type FlashCardSetSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    tag?: boolean
    dateCreated?: boolean
    lastModified?: boolean
    studyGuideID?: boolean
    studyGuide?: boolean | StudyGuideDefaultArgs<ExtArgs>
    flashCards?: boolean | FlashCardSet$flashCardsArgs<ExtArgs>
    videos?: boolean | FlashCardSet$videosArgs<ExtArgs>
    practiceQuestions?: boolean | FlashCardSet$practiceQuestionsArgs<ExtArgs>
    _count?: boolean | FlashCardSetCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["flashCardSet"]>

  export type FlashCardSetSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    tag?: boolean
    dateCreated?: boolean
    lastModified?: boolean
    studyGuideID?: boolean
    studyGuide?: boolean | StudyGuideDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["flashCardSet"]>

  export type FlashCardSetSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    tag?: boolean
    dateCreated?: boolean
    lastModified?: boolean
    studyGuideID?: boolean
    studyGuide?: boolean | StudyGuideDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["flashCardSet"]>

  export type FlashCardSetSelectScalar = {
    id?: boolean
    name?: boolean
    tag?: boolean
    dateCreated?: boolean
    lastModified?: boolean
    studyGuideID?: boolean
  }

  export type FlashCardSetOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "tag" | "dateCreated" | "lastModified" | "studyGuideID", ExtArgs["result"]["flashCardSet"]>
  export type FlashCardSetInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    studyGuide?: boolean | StudyGuideDefaultArgs<ExtArgs>
    flashCards?: boolean | FlashCardSet$flashCardsArgs<ExtArgs>
    videos?: boolean | FlashCardSet$videosArgs<ExtArgs>
    practiceQuestions?: boolean | FlashCardSet$practiceQuestionsArgs<ExtArgs>
    _count?: boolean | FlashCardSetCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FlashCardSetIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    studyGuide?: boolean | StudyGuideDefaultArgs<ExtArgs>
  }
  export type FlashCardSetIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    studyGuide?: boolean | StudyGuideDefaultArgs<ExtArgs>
  }

  export type $FlashCardSetPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FlashCardSet"
    objects: {
      studyGuide: Prisma.$StudyGuidePayload<ExtArgs>
      flashCards: Prisma.$FlashCardPayload<ExtArgs>[]
      videos: Prisma.$VideoPayload<ExtArgs>[]
      practiceQuestions: Prisma.$PracticeQuestionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      tag: string | null
      dateCreated: Date
      lastModified: Date
      studyGuideID: string
    }, ExtArgs["result"]["flashCardSet"]>
    composites: {}
  }

  type FlashCardSetGetPayload<S extends boolean | null | undefined | FlashCardSetDefaultArgs> = $Result.GetResult<Prisma.$FlashCardSetPayload, S>

  type FlashCardSetCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FlashCardSetFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FlashCardSetCountAggregateInputType | true
    }

  export interface FlashCardSetDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FlashCardSet'], meta: { name: 'FlashCardSet' } }
    /**
     * Find zero or one FlashCardSet that matches the filter.
     * @param {FlashCardSetFindUniqueArgs} args - Arguments to find a FlashCardSet
     * @example
     * // Get one FlashCardSet
     * const flashCardSet = await prisma.flashCardSet.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FlashCardSetFindUniqueArgs>(args: SelectSubset<T, FlashCardSetFindUniqueArgs<ExtArgs>>): Prisma__FlashCardSetClient<$Result.GetResult<Prisma.$FlashCardSetPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FlashCardSet that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FlashCardSetFindUniqueOrThrowArgs} args - Arguments to find a FlashCardSet
     * @example
     * // Get one FlashCardSet
     * const flashCardSet = await prisma.flashCardSet.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FlashCardSetFindUniqueOrThrowArgs>(args: SelectSubset<T, FlashCardSetFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FlashCardSetClient<$Result.GetResult<Prisma.$FlashCardSetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FlashCardSet that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlashCardSetFindFirstArgs} args - Arguments to find a FlashCardSet
     * @example
     * // Get one FlashCardSet
     * const flashCardSet = await prisma.flashCardSet.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FlashCardSetFindFirstArgs>(args?: SelectSubset<T, FlashCardSetFindFirstArgs<ExtArgs>>): Prisma__FlashCardSetClient<$Result.GetResult<Prisma.$FlashCardSetPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FlashCardSet that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlashCardSetFindFirstOrThrowArgs} args - Arguments to find a FlashCardSet
     * @example
     * // Get one FlashCardSet
     * const flashCardSet = await prisma.flashCardSet.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FlashCardSetFindFirstOrThrowArgs>(args?: SelectSubset<T, FlashCardSetFindFirstOrThrowArgs<ExtArgs>>): Prisma__FlashCardSetClient<$Result.GetResult<Prisma.$FlashCardSetPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FlashCardSets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlashCardSetFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FlashCardSets
     * const flashCardSets = await prisma.flashCardSet.findMany()
     * 
     * // Get first 10 FlashCardSets
     * const flashCardSets = await prisma.flashCardSet.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const flashCardSetWithIdOnly = await prisma.flashCardSet.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FlashCardSetFindManyArgs>(args?: SelectSubset<T, FlashCardSetFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FlashCardSetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FlashCardSet.
     * @param {FlashCardSetCreateArgs} args - Arguments to create a FlashCardSet.
     * @example
     * // Create one FlashCardSet
     * const FlashCardSet = await prisma.flashCardSet.create({
     *   data: {
     *     // ... data to create a FlashCardSet
     *   }
     * })
     * 
     */
    create<T extends FlashCardSetCreateArgs>(args: SelectSubset<T, FlashCardSetCreateArgs<ExtArgs>>): Prisma__FlashCardSetClient<$Result.GetResult<Prisma.$FlashCardSetPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FlashCardSets.
     * @param {FlashCardSetCreateManyArgs} args - Arguments to create many FlashCardSets.
     * @example
     * // Create many FlashCardSets
     * const flashCardSet = await prisma.flashCardSet.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FlashCardSetCreateManyArgs>(args?: SelectSubset<T, FlashCardSetCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FlashCardSets and returns the data saved in the database.
     * @param {FlashCardSetCreateManyAndReturnArgs} args - Arguments to create many FlashCardSets.
     * @example
     * // Create many FlashCardSets
     * const flashCardSet = await prisma.flashCardSet.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FlashCardSets and only return the `id`
     * const flashCardSetWithIdOnly = await prisma.flashCardSet.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FlashCardSetCreateManyAndReturnArgs>(args?: SelectSubset<T, FlashCardSetCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FlashCardSetPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FlashCardSet.
     * @param {FlashCardSetDeleteArgs} args - Arguments to delete one FlashCardSet.
     * @example
     * // Delete one FlashCardSet
     * const FlashCardSet = await prisma.flashCardSet.delete({
     *   where: {
     *     // ... filter to delete one FlashCardSet
     *   }
     * })
     * 
     */
    delete<T extends FlashCardSetDeleteArgs>(args: SelectSubset<T, FlashCardSetDeleteArgs<ExtArgs>>): Prisma__FlashCardSetClient<$Result.GetResult<Prisma.$FlashCardSetPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FlashCardSet.
     * @param {FlashCardSetUpdateArgs} args - Arguments to update one FlashCardSet.
     * @example
     * // Update one FlashCardSet
     * const flashCardSet = await prisma.flashCardSet.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FlashCardSetUpdateArgs>(args: SelectSubset<T, FlashCardSetUpdateArgs<ExtArgs>>): Prisma__FlashCardSetClient<$Result.GetResult<Prisma.$FlashCardSetPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FlashCardSets.
     * @param {FlashCardSetDeleteManyArgs} args - Arguments to filter FlashCardSets to delete.
     * @example
     * // Delete a few FlashCardSets
     * const { count } = await prisma.flashCardSet.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FlashCardSetDeleteManyArgs>(args?: SelectSubset<T, FlashCardSetDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FlashCardSets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlashCardSetUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FlashCardSets
     * const flashCardSet = await prisma.flashCardSet.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FlashCardSetUpdateManyArgs>(args: SelectSubset<T, FlashCardSetUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FlashCardSets and returns the data updated in the database.
     * @param {FlashCardSetUpdateManyAndReturnArgs} args - Arguments to update many FlashCardSets.
     * @example
     * // Update many FlashCardSets
     * const flashCardSet = await prisma.flashCardSet.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FlashCardSets and only return the `id`
     * const flashCardSetWithIdOnly = await prisma.flashCardSet.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FlashCardSetUpdateManyAndReturnArgs>(args: SelectSubset<T, FlashCardSetUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FlashCardSetPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FlashCardSet.
     * @param {FlashCardSetUpsertArgs} args - Arguments to update or create a FlashCardSet.
     * @example
     * // Update or create a FlashCardSet
     * const flashCardSet = await prisma.flashCardSet.upsert({
     *   create: {
     *     // ... data to create a FlashCardSet
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FlashCardSet we want to update
     *   }
     * })
     */
    upsert<T extends FlashCardSetUpsertArgs>(args: SelectSubset<T, FlashCardSetUpsertArgs<ExtArgs>>): Prisma__FlashCardSetClient<$Result.GetResult<Prisma.$FlashCardSetPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FlashCardSets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlashCardSetCountArgs} args - Arguments to filter FlashCardSets to count.
     * @example
     * // Count the number of FlashCardSets
     * const count = await prisma.flashCardSet.count({
     *   where: {
     *     // ... the filter for the FlashCardSets we want to count
     *   }
     * })
    **/
    count<T extends FlashCardSetCountArgs>(
      args?: Subset<T, FlashCardSetCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FlashCardSetCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FlashCardSet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlashCardSetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FlashCardSetAggregateArgs>(args: Subset<T, FlashCardSetAggregateArgs>): Prisma.PrismaPromise<GetFlashCardSetAggregateType<T>>

    /**
     * Group by FlashCardSet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlashCardSetGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FlashCardSetGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FlashCardSetGroupByArgs['orderBy'] }
        : { orderBy?: FlashCardSetGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FlashCardSetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFlashCardSetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FlashCardSet model
   */
  readonly fields: FlashCardSetFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FlashCardSet.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FlashCardSetClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    studyGuide<T extends StudyGuideDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudyGuideDefaultArgs<ExtArgs>>): Prisma__StudyGuideClient<$Result.GetResult<Prisma.$StudyGuidePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    flashCards<T extends FlashCardSet$flashCardsArgs<ExtArgs> = {}>(args?: Subset<T, FlashCardSet$flashCardsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FlashCardPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    videos<T extends FlashCardSet$videosArgs<ExtArgs> = {}>(args?: Subset<T, FlashCardSet$videosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VideoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    practiceQuestions<T extends FlashCardSet$practiceQuestionsArgs<ExtArgs> = {}>(args?: Subset<T, FlashCardSet$practiceQuestionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PracticeQuestionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FlashCardSet model
   */
  interface FlashCardSetFieldRefs {
    readonly id: FieldRef<"FlashCardSet", 'String'>
    readonly name: FieldRef<"FlashCardSet", 'String'>
    readonly tag: FieldRef<"FlashCardSet", 'String'>
    readonly dateCreated: FieldRef<"FlashCardSet", 'DateTime'>
    readonly lastModified: FieldRef<"FlashCardSet", 'DateTime'>
    readonly studyGuideID: FieldRef<"FlashCardSet", 'String'>
  }
    

  // Custom InputTypes
  /**
   * FlashCardSet findUnique
   */
  export type FlashCardSetFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlashCardSet
     */
    select?: FlashCardSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlashCardSet
     */
    omit?: FlashCardSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlashCardSetInclude<ExtArgs> | null
    /**
     * Filter, which FlashCardSet to fetch.
     */
    where: FlashCardSetWhereUniqueInput
  }

  /**
   * FlashCardSet findUniqueOrThrow
   */
  export type FlashCardSetFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlashCardSet
     */
    select?: FlashCardSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlashCardSet
     */
    omit?: FlashCardSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlashCardSetInclude<ExtArgs> | null
    /**
     * Filter, which FlashCardSet to fetch.
     */
    where: FlashCardSetWhereUniqueInput
  }

  /**
   * FlashCardSet findFirst
   */
  export type FlashCardSetFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlashCardSet
     */
    select?: FlashCardSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlashCardSet
     */
    omit?: FlashCardSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlashCardSetInclude<ExtArgs> | null
    /**
     * Filter, which FlashCardSet to fetch.
     */
    where?: FlashCardSetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FlashCardSets to fetch.
     */
    orderBy?: FlashCardSetOrderByWithRelationInput | FlashCardSetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FlashCardSets.
     */
    cursor?: FlashCardSetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FlashCardSets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FlashCardSets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FlashCardSets.
     */
    distinct?: FlashCardSetScalarFieldEnum | FlashCardSetScalarFieldEnum[]
  }

  /**
   * FlashCardSet findFirstOrThrow
   */
  export type FlashCardSetFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlashCardSet
     */
    select?: FlashCardSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlashCardSet
     */
    omit?: FlashCardSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlashCardSetInclude<ExtArgs> | null
    /**
     * Filter, which FlashCardSet to fetch.
     */
    where?: FlashCardSetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FlashCardSets to fetch.
     */
    orderBy?: FlashCardSetOrderByWithRelationInput | FlashCardSetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FlashCardSets.
     */
    cursor?: FlashCardSetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FlashCardSets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FlashCardSets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FlashCardSets.
     */
    distinct?: FlashCardSetScalarFieldEnum | FlashCardSetScalarFieldEnum[]
  }

  /**
   * FlashCardSet findMany
   */
  export type FlashCardSetFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlashCardSet
     */
    select?: FlashCardSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlashCardSet
     */
    omit?: FlashCardSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlashCardSetInclude<ExtArgs> | null
    /**
     * Filter, which FlashCardSets to fetch.
     */
    where?: FlashCardSetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FlashCardSets to fetch.
     */
    orderBy?: FlashCardSetOrderByWithRelationInput | FlashCardSetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FlashCardSets.
     */
    cursor?: FlashCardSetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FlashCardSets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FlashCardSets.
     */
    skip?: number
    distinct?: FlashCardSetScalarFieldEnum | FlashCardSetScalarFieldEnum[]
  }

  /**
   * FlashCardSet create
   */
  export type FlashCardSetCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlashCardSet
     */
    select?: FlashCardSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlashCardSet
     */
    omit?: FlashCardSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlashCardSetInclude<ExtArgs> | null
    /**
     * The data needed to create a FlashCardSet.
     */
    data: XOR<FlashCardSetCreateInput, FlashCardSetUncheckedCreateInput>
  }

  /**
   * FlashCardSet createMany
   */
  export type FlashCardSetCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FlashCardSets.
     */
    data: FlashCardSetCreateManyInput | FlashCardSetCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FlashCardSet createManyAndReturn
   */
  export type FlashCardSetCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlashCardSet
     */
    select?: FlashCardSetSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FlashCardSet
     */
    omit?: FlashCardSetOmit<ExtArgs> | null
    /**
     * The data used to create many FlashCardSets.
     */
    data: FlashCardSetCreateManyInput | FlashCardSetCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlashCardSetIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FlashCardSet update
   */
  export type FlashCardSetUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlashCardSet
     */
    select?: FlashCardSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlashCardSet
     */
    omit?: FlashCardSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlashCardSetInclude<ExtArgs> | null
    /**
     * The data needed to update a FlashCardSet.
     */
    data: XOR<FlashCardSetUpdateInput, FlashCardSetUncheckedUpdateInput>
    /**
     * Choose, which FlashCardSet to update.
     */
    where: FlashCardSetWhereUniqueInput
  }

  /**
   * FlashCardSet updateMany
   */
  export type FlashCardSetUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FlashCardSets.
     */
    data: XOR<FlashCardSetUpdateManyMutationInput, FlashCardSetUncheckedUpdateManyInput>
    /**
     * Filter which FlashCardSets to update
     */
    where?: FlashCardSetWhereInput
    /**
     * Limit how many FlashCardSets to update.
     */
    limit?: number
  }

  /**
   * FlashCardSet updateManyAndReturn
   */
  export type FlashCardSetUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlashCardSet
     */
    select?: FlashCardSetSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FlashCardSet
     */
    omit?: FlashCardSetOmit<ExtArgs> | null
    /**
     * The data used to update FlashCardSets.
     */
    data: XOR<FlashCardSetUpdateManyMutationInput, FlashCardSetUncheckedUpdateManyInput>
    /**
     * Filter which FlashCardSets to update
     */
    where?: FlashCardSetWhereInput
    /**
     * Limit how many FlashCardSets to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlashCardSetIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * FlashCardSet upsert
   */
  export type FlashCardSetUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlashCardSet
     */
    select?: FlashCardSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlashCardSet
     */
    omit?: FlashCardSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlashCardSetInclude<ExtArgs> | null
    /**
     * The filter to search for the FlashCardSet to update in case it exists.
     */
    where: FlashCardSetWhereUniqueInput
    /**
     * In case the FlashCardSet found by the `where` argument doesn't exist, create a new FlashCardSet with this data.
     */
    create: XOR<FlashCardSetCreateInput, FlashCardSetUncheckedCreateInput>
    /**
     * In case the FlashCardSet was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FlashCardSetUpdateInput, FlashCardSetUncheckedUpdateInput>
  }

  /**
   * FlashCardSet delete
   */
  export type FlashCardSetDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlashCardSet
     */
    select?: FlashCardSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlashCardSet
     */
    omit?: FlashCardSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlashCardSetInclude<ExtArgs> | null
    /**
     * Filter which FlashCardSet to delete.
     */
    where: FlashCardSetWhereUniqueInput
  }

  /**
   * FlashCardSet deleteMany
   */
  export type FlashCardSetDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FlashCardSets to delete
     */
    where?: FlashCardSetWhereInput
    /**
     * Limit how many FlashCardSets to delete.
     */
    limit?: number
  }

  /**
   * FlashCardSet.flashCards
   */
  export type FlashCardSet$flashCardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlashCard
     */
    select?: FlashCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlashCard
     */
    omit?: FlashCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlashCardInclude<ExtArgs> | null
    where?: FlashCardWhereInput
    orderBy?: FlashCardOrderByWithRelationInput | FlashCardOrderByWithRelationInput[]
    cursor?: FlashCardWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FlashCardScalarFieldEnum | FlashCardScalarFieldEnum[]
  }

  /**
   * FlashCardSet.videos
   */
  export type FlashCardSet$videosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Video
     */
    omit?: VideoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VideoInclude<ExtArgs> | null
    where?: VideoWhereInput
    orderBy?: VideoOrderByWithRelationInput | VideoOrderByWithRelationInput[]
    cursor?: VideoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VideoScalarFieldEnum | VideoScalarFieldEnum[]
  }

  /**
   * FlashCardSet.practiceQuestions
   */
  export type FlashCardSet$practiceQuestionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticeQuestion
     */
    select?: PracticeQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PracticeQuestion
     */
    omit?: PracticeQuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeQuestionInclude<ExtArgs> | null
    where?: PracticeQuestionWhereInput
    orderBy?: PracticeQuestionOrderByWithRelationInput | PracticeQuestionOrderByWithRelationInput[]
    cursor?: PracticeQuestionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PracticeQuestionScalarFieldEnum | PracticeQuestionScalarFieldEnum[]
  }

  /**
   * FlashCardSet without action
   */
  export type FlashCardSetDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlashCardSet
     */
    select?: FlashCardSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlashCardSet
     */
    omit?: FlashCardSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlashCardSetInclude<ExtArgs> | null
  }


  /**
   * Model FlashCard
   */

  export type AggregateFlashCard = {
    _count: FlashCardCountAggregateOutputType | null
    _avg: FlashCardAvgAggregateOutputType | null
    _sum: FlashCardSumAggregateOutputType | null
    _min: FlashCardMinAggregateOutputType | null
    _max: FlashCardMaxAggregateOutputType | null
  }

  export type FlashCardAvgAggregateOutputType = {
    cardIndex: number | null
    learnedCount: number | null
  }

  export type FlashCardSumAggregateOutputType = {
    cardIndex: number | null
    learnedCount: number | null
  }

  export type FlashCardMinAggregateOutputType = {
    id: string | null
    frontContent: string | null
    backContent: string | null
    cardIndex: number | null
    flashCardSetID: string | null
    learnedCount: number | null
    lastLearned: Date | null
    image: string | null
  }

  export type FlashCardMaxAggregateOutputType = {
    id: string | null
    frontContent: string | null
    backContent: string | null
    cardIndex: number | null
    flashCardSetID: string | null
    learnedCount: number | null
    lastLearned: Date | null
    image: string | null
  }

  export type FlashCardCountAggregateOutputType = {
    id: number
    frontContent: number
    backContent: number
    cardIndex: number
    flashCardSetID: number
    learnedCount: number
    lastLearned: number
    image: number
    _all: number
  }


  export type FlashCardAvgAggregateInputType = {
    cardIndex?: true
    learnedCount?: true
  }

  export type FlashCardSumAggregateInputType = {
    cardIndex?: true
    learnedCount?: true
  }

  export type FlashCardMinAggregateInputType = {
    id?: true
    frontContent?: true
    backContent?: true
    cardIndex?: true
    flashCardSetID?: true
    learnedCount?: true
    lastLearned?: true
    image?: true
  }

  export type FlashCardMaxAggregateInputType = {
    id?: true
    frontContent?: true
    backContent?: true
    cardIndex?: true
    flashCardSetID?: true
    learnedCount?: true
    lastLearned?: true
    image?: true
  }

  export type FlashCardCountAggregateInputType = {
    id?: true
    frontContent?: true
    backContent?: true
    cardIndex?: true
    flashCardSetID?: true
    learnedCount?: true
    lastLearned?: true
    image?: true
    _all?: true
  }

  export type FlashCardAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FlashCard to aggregate.
     */
    where?: FlashCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FlashCards to fetch.
     */
    orderBy?: FlashCardOrderByWithRelationInput | FlashCardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FlashCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FlashCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FlashCards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FlashCards
    **/
    _count?: true | FlashCardCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FlashCardAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FlashCardSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FlashCardMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FlashCardMaxAggregateInputType
  }

  export type GetFlashCardAggregateType<T extends FlashCardAggregateArgs> = {
        [P in keyof T & keyof AggregateFlashCard]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFlashCard[P]>
      : GetScalarType<T[P], AggregateFlashCard[P]>
  }




  export type FlashCardGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FlashCardWhereInput
    orderBy?: FlashCardOrderByWithAggregationInput | FlashCardOrderByWithAggregationInput[]
    by: FlashCardScalarFieldEnum[] | FlashCardScalarFieldEnum
    having?: FlashCardScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FlashCardCountAggregateInputType | true
    _avg?: FlashCardAvgAggregateInputType
    _sum?: FlashCardSumAggregateInputType
    _min?: FlashCardMinAggregateInputType
    _max?: FlashCardMaxAggregateInputType
  }

  export type FlashCardGroupByOutputType = {
    id: string
    frontContent: string
    backContent: string
    cardIndex: number
    flashCardSetID: string
    learnedCount: number
    lastLearned: Date | null
    image: string | null
    _count: FlashCardCountAggregateOutputType | null
    _avg: FlashCardAvgAggregateOutputType | null
    _sum: FlashCardSumAggregateOutputType | null
    _min: FlashCardMinAggregateOutputType | null
    _max: FlashCardMaxAggregateOutputType | null
  }

  type GetFlashCardGroupByPayload<T extends FlashCardGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FlashCardGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FlashCardGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FlashCardGroupByOutputType[P]>
            : GetScalarType<T[P], FlashCardGroupByOutputType[P]>
        }
      >
    >


  export type FlashCardSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    frontContent?: boolean
    backContent?: boolean
    cardIndex?: boolean
    flashCardSetID?: boolean
    learnedCount?: boolean
    lastLearned?: boolean
    image?: boolean
    flashCardSet?: boolean | FlashCardSetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["flashCard"]>

  export type FlashCardSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    frontContent?: boolean
    backContent?: boolean
    cardIndex?: boolean
    flashCardSetID?: boolean
    learnedCount?: boolean
    lastLearned?: boolean
    image?: boolean
    flashCardSet?: boolean | FlashCardSetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["flashCard"]>

  export type FlashCardSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    frontContent?: boolean
    backContent?: boolean
    cardIndex?: boolean
    flashCardSetID?: boolean
    learnedCount?: boolean
    lastLearned?: boolean
    image?: boolean
    flashCardSet?: boolean | FlashCardSetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["flashCard"]>

  export type FlashCardSelectScalar = {
    id?: boolean
    frontContent?: boolean
    backContent?: boolean
    cardIndex?: boolean
    flashCardSetID?: boolean
    learnedCount?: boolean
    lastLearned?: boolean
    image?: boolean
  }

  export type FlashCardOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "frontContent" | "backContent" | "cardIndex" | "flashCardSetID" | "learnedCount" | "lastLearned" | "image", ExtArgs["result"]["flashCard"]>
  export type FlashCardInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    flashCardSet?: boolean | FlashCardSetDefaultArgs<ExtArgs>
  }
  export type FlashCardIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    flashCardSet?: boolean | FlashCardSetDefaultArgs<ExtArgs>
  }
  export type FlashCardIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    flashCardSet?: boolean | FlashCardSetDefaultArgs<ExtArgs>
  }

  export type $FlashCardPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FlashCard"
    objects: {
      flashCardSet: Prisma.$FlashCardSetPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      frontContent: string
      backContent: string
      cardIndex: number
      flashCardSetID: string
      learnedCount: number
      lastLearned: Date | null
      image: string | null
    }, ExtArgs["result"]["flashCard"]>
    composites: {}
  }

  type FlashCardGetPayload<S extends boolean | null | undefined | FlashCardDefaultArgs> = $Result.GetResult<Prisma.$FlashCardPayload, S>

  type FlashCardCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FlashCardFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FlashCardCountAggregateInputType | true
    }

  export interface FlashCardDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FlashCard'], meta: { name: 'FlashCard' } }
    /**
     * Find zero or one FlashCard that matches the filter.
     * @param {FlashCardFindUniqueArgs} args - Arguments to find a FlashCard
     * @example
     * // Get one FlashCard
     * const flashCard = await prisma.flashCard.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FlashCardFindUniqueArgs>(args: SelectSubset<T, FlashCardFindUniqueArgs<ExtArgs>>): Prisma__FlashCardClient<$Result.GetResult<Prisma.$FlashCardPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FlashCard that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FlashCardFindUniqueOrThrowArgs} args - Arguments to find a FlashCard
     * @example
     * // Get one FlashCard
     * const flashCard = await prisma.flashCard.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FlashCardFindUniqueOrThrowArgs>(args: SelectSubset<T, FlashCardFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FlashCardClient<$Result.GetResult<Prisma.$FlashCardPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FlashCard that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlashCardFindFirstArgs} args - Arguments to find a FlashCard
     * @example
     * // Get one FlashCard
     * const flashCard = await prisma.flashCard.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FlashCardFindFirstArgs>(args?: SelectSubset<T, FlashCardFindFirstArgs<ExtArgs>>): Prisma__FlashCardClient<$Result.GetResult<Prisma.$FlashCardPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FlashCard that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlashCardFindFirstOrThrowArgs} args - Arguments to find a FlashCard
     * @example
     * // Get one FlashCard
     * const flashCard = await prisma.flashCard.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FlashCardFindFirstOrThrowArgs>(args?: SelectSubset<T, FlashCardFindFirstOrThrowArgs<ExtArgs>>): Prisma__FlashCardClient<$Result.GetResult<Prisma.$FlashCardPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FlashCards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlashCardFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FlashCards
     * const flashCards = await prisma.flashCard.findMany()
     * 
     * // Get first 10 FlashCards
     * const flashCards = await prisma.flashCard.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const flashCardWithIdOnly = await prisma.flashCard.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FlashCardFindManyArgs>(args?: SelectSubset<T, FlashCardFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FlashCardPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FlashCard.
     * @param {FlashCardCreateArgs} args - Arguments to create a FlashCard.
     * @example
     * // Create one FlashCard
     * const FlashCard = await prisma.flashCard.create({
     *   data: {
     *     // ... data to create a FlashCard
     *   }
     * })
     * 
     */
    create<T extends FlashCardCreateArgs>(args: SelectSubset<T, FlashCardCreateArgs<ExtArgs>>): Prisma__FlashCardClient<$Result.GetResult<Prisma.$FlashCardPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FlashCards.
     * @param {FlashCardCreateManyArgs} args - Arguments to create many FlashCards.
     * @example
     * // Create many FlashCards
     * const flashCard = await prisma.flashCard.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FlashCardCreateManyArgs>(args?: SelectSubset<T, FlashCardCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FlashCards and returns the data saved in the database.
     * @param {FlashCardCreateManyAndReturnArgs} args - Arguments to create many FlashCards.
     * @example
     * // Create many FlashCards
     * const flashCard = await prisma.flashCard.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FlashCards and only return the `id`
     * const flashCardWithIdOnly = await prisma.flashCard.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FlashCardCreateManyAndReturnArgs>(args?: SelectSubset<T, FlashCardCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FlashCardPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FlashCard.
     * @param {FlashCardDeleteArgs} args - Arguments to delete one FlashCard.
     * @example
     * // Delete one FlashCard
     * const FlashCard = await prisma.flashCard.delete({
     *   where: {
     *     // ... filter to delete one FlashCard
     *   }
     * })
     * 
     */
    delete<T extends FlashCardDeleteArgs>(args: SelectSubset<T, FlashCardDeleteArgs<ExtArgs>>): Prisma__FlashCardClient<$Result.GetResult<Prisma.$FlashCardPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FlashCard.
     * @param {FlashCardUpdateArgs} args - Arguments to update one FlashCard.
     * @example
     * // Update one FlashCard
     * const flashCard = await prisma.flashCard.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FlashCardUpdateArgs>(args: SelectSubset<T, FlashCardUpdateArgs<ExtArgs>>): Prisma__FlashCardClient<$Result.GetResult<Prisma.$FlashCardPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FlashCards.
     * @param {FlashCardDeleteManyArgs} args - Arguments to filter FlashCards to delete.
     * @example
     * // Delete a few FlashCards
     * const { count } = await prisma.flashCard.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FlashCardDeleteManyArgs>(args?: SelectSubset<T, FlashCardDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FlashCards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlashCardUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FlashCards
     * const flashCard = await prisma.flashCard.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FlashCardUpdateManyArgs>(args: SelectSubset<T, FlashCardUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FlashCards and returns the data updated in the database.
     * @param {FlashCardUpdateManyAndReturnArgs} args - Arguments to update many FlashCards.
     * @example
     * // Update many FlashCards
     * const flashCard = await prisma.flashCard.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FlashCards and only return the `id`
     * const flashCardWithIdOnly = await prisma.flashCard.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FlashCardUpdateManyAndReturnArgs>(args: SelectSubset<T, FlashCardUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FlashCardPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FlashCard.
     * @param {FlashCardUpsertArgs} args - Arguments to update or create a FlashCard.
     * @example
     * // Update or create a FlashCard
     * const flashCard = await prisma.flashCard.upsert({
     *   create: {
     *     // ... data to create a FlashCard
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FlashCard we want to update
     *   }
     * })
     */
    upsert<T extends FlashCardUpsertArgs>(args: SelectSubset<T, FlashCardUpsertArgs<ExtArgs>>): Prisma__FlashCardClient<$Result.GetResult<Prisma.$FlashCardPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FlashCards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlashCardCountArgs} args - Arguments to filter FlashCards to count.
     * @example
     * // Count the number of FlashCards
     * const count = await prisma.flashCard.count({
     *   where: {
     *     // ... the filter for the FlashCards we want to count
     *   }
     * })
    **/
    count<T extends FlashCardCountArgs>(
      args?: Subset<T, FlashCardCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FlashCardCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FlashCard.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlashCardAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FlashCardAggregateArgs>(args: Subset<T, FlashCardAggregateArgs>): Prisma.PrismaPromise<GetFlashCardAggregateType<T>>

    /**
     * Group by FlashCard.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlashCardGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FlashCardGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FlashCardGroupByArgs['orderBy'] }
        : { orderBy?: FlashCardGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FlashCardGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFlashCardGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FlashCard model
   */
  readonly fields: FlashCardFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FlashCard.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FlashCardClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    flashCardSet<T extends FlashCardSetDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FlashCardSetDefaultArgs<ExtArgs>>): Prisma__FlashCardSetClient<$Result.GetResult<Prisma.$FlashCardSetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FlashCard model
   */
  interface FlashCardFieldRefs {
    readonly id: FieldRef<"FlashCard", 'String'>
    readonly frontContent: FieldRef<"FlashCard", 'String'>
    readonly backContent: FieldRef<"FlashCard", 'String'>
    readonly cardIndex: FieldRef<"FlashCard", 'Int'>
    readonly flashCardSetID: FieldRef<"FlashCard", 'String'>
    readonly learnedCount: FieldRef<"FlashCard", 'Int'>
    readonly lastLearned: FieldRef<"FlashCard", 'DateTime'>
    readonly image: FieldRef<"FlashCard", 'String'>
  }
    

  // Custom InputTypes
  /**
   * FlashCard findUnique
   */
  export type FlashCardFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlashCard
     */
    select?: FlashCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlashCard
     */
    omit?: FlashCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlashCardInclude<ExtArgs> | null
    /**
     * Filter, which FlashCard to fetch.
     */
    where: FlashCardWhereUniqueInput
  }

  /**
   * FlashCard findUniqueOrThrow
   */
  export type FlashCardFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlashCard
     */
    select?: FlashCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlashCard
     */
    omit?: FlashCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlashCardInclude<ExtArgs> | null
    /**
     * Filter, which FlashCard to fetch.
     */
    where: FlashCardWhereUniqueInput
  }

  /**
   * FlashCard findFirst
   */
  export type FlashCardFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlashCard
     */
    select?: FlashCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlashCard
     */
    omit?: FlashCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlashCardInclude<ExtArgs> | null
    /**
     * Filter, which FlashCard to fetch.
     */
    where?: FlashCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FlashCards to fetch.
     */
    orderBy?: FlashCardOrderByWithRelationInput | FlashCardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FlashCards.
     */
    cursor?: FlashCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FlashCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FlashCards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FlashCards.
     */
    distinct?: FlashCardScalarFieldEnum | FlashCardScalarFieldEnum[]
  }

  /**
   * FlashCard findFirstOrThrow
   */
  export type FlashCardFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlashCard
     */
    select?: FlashCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlashCard
     */
    omit?: FlashCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlashCardInclude<ExtArgs> | null
    /**
     * Filter, which FlashCard to fetch.
     */
    where?: FlashCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FlashCards to fetch.
     */
    orderBy?: FlashCardOrderByWithRelationInput | FlashCardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FlashCards.
     */
    cursor?: FlashCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FlashCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FlashCards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FlashCards.
     */
    distinct?: FlashCardScalarFieldEnum | FlashCardScalarFieldEnum[]
  }

  /**
   * FlashCard findMany
   */
  export type FlashCardFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlashCard
     */
    select?: FlashCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlashCard
     */
    omit?: FlashCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlashCardInclude<ExtArgs> | null
    /**
     * Filter, which FlashCards to fetch.
     */
    where?: FlashCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FlashCards to fetch.
     */
    orderBy?: FlashCardOrderByWithRelationInput | FlashCardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FlashCards.
     */
    cursor?: FlashCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FlashCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FlashCards.
     */
    skip?: number
    distinct?: FlashCardScalarFieldEnum | FlashCardScalarFieldEnum[]
  }

  /**
   * FlashCard create
   */
  export type FlashCardCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlashCard
     */
    select?: FlashCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlashCard
     */
    omit?: FlashCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlashCardInclude<ExtArgs> | null
    /**
     * The data needed to create a FlashCard.
     */
    data: XOR<FlashCardCreateInput, FlashCardUncheckedCreateInput>
  }

  /**
   * FlashCard createMany
   */
  export type FlashCardCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FlashCards.
     */
    data: FlashCardCreateManyInput | FlashCardCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FlashCard createManyAndReturn
   */
  export type FlashCardCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlashCard
     */
    select?: FlashCardSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FlashCard
     */
    omit?: FlashCardOmit<ExtArgs> | null
    /**
     * The data used to create many FlashCards.
     */
    data: FlashCardCreateManyInput | FlashCardCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlashCardIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FlashCard update
   */
  export type FlashCardUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlashCard
     */
    select?: FlashCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlashCard
     */
    omit?: FlashCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlashCardInclude<ExtArgs> | null
    /**
     * The data needed to update a FlashCard.
     */
    data: XOR<FlashCardUpdateInput, FlashCardUncheckedUpdateInput>
    /**
     * Choose, which FlashCard to update.
     */
    where: FlashCardWhereUniqueInput
  }

  /**
   * FlashCard updateMany
   */
  export type FlashCardUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FlashCards.
     */
    data: XOR<FlashCardUpdateManyMutationInput, FlashCardUncheckedUpdateManyInput>
    /**
     * Filter which FlashCards to update
     */
    where?: FlashCardWhereInput
    /**
     * Limit how many FlashCards to update.
     */
    limit?: number
  }

  /**
   * FlashCard updateManyAndReturn
   */
  export type FlashCardUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlashCard
     */
    select?: FlashCardSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FlashCard
     */
    omit?: FlashCardOmit<ExtArgs> | null
    /**
     * The data used to update FlashCards.
     */
    data: XOR<FlashCardUpdateManyMutationInput, FlashCardUncheckedUpdateManyInput>
    /**
     * Filter which FlashCards to update
     */
    where?: FlashCardWhereInput
    /**
     * Limit how many FlashCards to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlashCardIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * FlashCard upsert
   */
  export type FlashCardUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlashCard
     */
    select?: FlashCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlashCard
     */
    omit?: FlashCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlashCardInclude<ExtArgs> | null
    /**
     * The filter to search for the FlashCard to update in case it exists.
     */
    where: FlashCardWhereUniqueInput
    /**
     * In case the FlashCard found by the `where` argument doesn't exist, create a new FlashCard with this data.
     */
    create: XOR<FlashCardCreateInput, FlashCardUncheckedCreateInput>
    /**
     * In case the FlashCard was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FlashCardUpdateInput, FlashCardUncheckedUpdateInput>
  }

  /**
   * FlashCard delete
   */
  export type FlashCardDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlashCard
     */
    select?: FlashCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlashCard
     */
    omit?: FlashCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlashCardInclude<ExtArgs> | null
    /**
     * Filter which FlashCard to delete.
     */
    where: FlashCardWhereUniqueInput
  }

  /**
   * FlashCard deleteMany
   */
  export type FlashCardDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FlashCards to delete
     */
    where?: FlashCardWhereInput
    /**
     * Limit how many FlashCards to delete.
     */
    limit?: number
  }

  /**
   * FlashCard without action
   */
  export type FlashCardDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlashCard
     */
    select?: FlashCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlashCard
     */
    omit?: FlashCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlashCardInclude<ExtArgs> | null
  }


  /**
   * Model Video
   */

  export type AggregateVideo = {
    _count: VideoCountAggregateOutputType | null
    _min: VideoMinAggregateOutputType | null
    _max: VideoMaxAggregateOutputType | null
  }

  export type VideoMinAggregateOutputType = {
    id: string | null
    flashCardSetID: string | null
    dateCreated: Date | null
    watched: boolean | null
    url: string | null
  }

  export type VideoMaxAggregateOutputType = {
    id: string | null
    flashCardSetID: string | null
    dateCreated: Date | null
    watched: boolean | null
    url: string | null
  }

  export type VideoCountAggregateOutputType = {
    id: number
    flashCardSetID: number
    dateCreated: number
    watched: number
    url: number
    _all: number
  }


  export type VideoMinAggregateInputType = {
    id?: true
    flashCardSetID?: true
    dateCreated?: true
    watched?: true
    url?: true
  }

  export type VideoMaxAggregateInputType = {
    id?: true
    flashCardSetID?: true
    dateCreated?: true
    watched?: true
    url?: true
  }

  export type VideoCountAggregateInputType = {
    id?: true
    flashCardSetID?: true
    dateCreated?: true
    watched?: true
    url?: true
    _all?: true
  }

  export type VideoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Video to aggregate.
     */
    where?: VideoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Videos to fetch.
     */
    orderBy?: VideoOrderByWithRelationInput | VideoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VideoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Videos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Videos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Videos
    **/
    _count?: true | VideoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VideoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VideoMaxAggregateInputType
  }

  export type GetVideoAggregateType<T extends VideoAggregateArgs> = {
        [P in keyof T & keyof AggregateVideo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVideo[P]>
      : GetScalarType<T[P], AggregateVideo[P]>
  }




  export type VideoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VideoWhereInput
    orderBy?: VideoOrderByWithAggregationInput | VideoOrderByWithAggregationInput[]
    by: VideoScalarFieldEnum[] | VideoScalarFieldEnum
    having?: VideoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VideoCountAggregateInputType | true
    _min?: VideoMinAggregateInputType
    _max?: VideoMaxAggregateInputType
  }

  export type VideoGroupByOutputType = {
    id: string
    flashCardSetID: string
    dateCreated: Date
    watched: boolean
    url: string
    _count: VideoCountAggregateOutputType | null
    _min: VideoMinAggregateOutputType | null
    _max: VideoMaxAggregateOutputType | null
  }

  type GetVideoGroupByPayload<T extends VideoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VideoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VideoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VideoGroupByOutputType[P]>
            : GetScalarType<T[P], VideoGroupByOutputType[P]>
        }
      >
    >


  export type VideoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    flashCardSetID?: boolean
    dateCreated?: boolean
    watched?: boolean
    url?: boolean
    flashCardSet?: boolean | FlashCardSetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["video"]>

  export type VideoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    flashCardSetID?: boolean
    dateCreated?: boolean
    watched?: boolean
    url?: boolean
    flashCardSet?: boolean | FlashCardSetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["video"]>

  export type VideoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    flashCardSetID?: boolean
    dateCreated?: boolean
    watched?: boolean
    url?: boolean
    flashCardSet?: boolean | FlashCardSetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["video"]>

  export type VideoSelectScalar = {
    id?: boolean
    flashCardSetID?: boolean
    dateCreated?: boolean
    watched?: boolean
    url?: boolean
  }

  export type VideoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "flashCardSetID" | "dateCreated" | "watched" | "url", ExtArgs["result"]["video"]>
  export type VideoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    flashCardSet?: boolean | FlashCardSetDefaultArgs<ExtArgs>
  }
  export type VideoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    flashCardSet?: boolean | FlashCardSetDefaultArgs<ExtArgs>
  }
  export type VideoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    flashCardSet?: boolean | FlashCardSetDefaultArgs<ExtArgs>
  }

  export type $VideoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Video"
    objects: {
      flashCardSet: Prisma.$FlashCardSetPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      flashCardSetID: string
      dateCreated: Date
      watched: boolean
      url: string
    }, ExtArgs["result"]["video"]>
    composites: {}
  }

  type VideoGetPayload<S extends boolean | null | undefined | VideoDefaultArgs> = $Result.GetResult<Prisma.$VideoPayload, S>

  type VideoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VideoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VideoCountAggregateInputType | true
    }

  export interface VideoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Video'], meta: { name: 'Video' } }
    /**
     * Find zero or one Video that matches the filter.
     * @param {VideoFindUniqueArgs} args - Arguments to find a Video
     * @example
     * // Get one Video
     * const video = await prisma.video.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VideoFindUniqueArgs>(args: SelectSubset<T, VideoFindUniqueArgs<ExtArgs>>): Prisma__VideoClient<$Result.GetResult<Prisma.$VideoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Video that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VideoFindUniqueOrThrowArgs} args - Arguments to find a Video
     * @example
     * // Get one Video
     * const video = await prisma.video.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VideoFindUniqueOrThrowArgs>(args: SelectSubset<T, VideoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VideoClient<$Result.GetResult<Prisma.$VideoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Video that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoFindFirstArgs} args - Arguments to find a Video
     * @example
     * // Get one Video
     * const video = await prisma.video.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VideoFindFirstArgs>(args?: SelectSubset<T, VideoFindFirstArgs<ExtArgs>>): Prisma__VideoClient<$Result.GetResult<Prisma.$VideoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Video that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoFindFirstOrThrowArgs} args - Arguments to find a Video
     * @example
     * // Get one Video
     * const video = await prisma.video.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VideoFindFirstOrThrowArgs>(args?: SelectSubset<T, VideoFindFirstOrThrowArgs<ExtArgs>>): Prisma__VideoClient<$Result.GetResult<Prisma.$VideoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Videos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Videos
     * const videos = await prisma.video.findMany()
     * 
     * // Get first 10 Videos
     * const videos = await prisma.video.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const videoWithIdOnly = await prisma.video.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VideoFindManyArgs>(args?: SelectSubset<T, VideoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VideoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Video.
     * @param {VideoCreateArgs} args - Arguments to create a Video.
     * @example
     * // Create one Video
     * const Video = await prisma.video.create({
     *   data: {
     *     // ... data to create a Video
     *   }
     * })
     * 
     */
    create<T extends VideoCreateArgs>(args: SelectSubset<T, VideoCreateArgs<ExtArgs>>): Prisma__VideoClient<$Result.GetResult<Prisma.$VideoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Videos.
     * @param {VideoCreateManyArgs} args - Arguments to create many Videos.
     * @example
     * // Create many Videos
     * const video = await prisma.video.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VideoCreateManyArgs>(args?: SelectSubset<T, VideoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Videos and returns the data saved in the database.
     * @param {VideoCreateManyAndReturnArgs} args - Arguments to create many Videos.
     * @example
     * // Create many Videos
     * const video = await prisma.video.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Videos and only return the `id`
     * const videoWithIdOnly = await prisma.video.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VideoCreateManyAndReturnArgs>(args?: SelectSubset<T, VideoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VideoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Video.
     * @param {VideoDeleteArgs} args - Arguments to delete one Video.
     * @example
     * // Delete one Video
     * const Video = await prisma.video.delete({
     *   where: {
     *     // ... filter to delete one Video
     *   }
     * })
     * 
     */
    delete<T extends VideoDeleteArgs>(args: SelectSubset<T, VideoDeleteArgs<ExtArgs>>): Prisma__VideoClient<$Result.GetResult<Prisma.$VideoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Video.
     * @param {VideoUpdateArgs} args - Arguments to update one Video.
     * @example
     * // Update one Video
     * const video = await prisma.video.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VideoUpdateArgs>(args: SelectSubset<T, VideoUpdateArgs<ExtArgs>>): Prisma__VideoClient<$Result.GetResult<Prisma.$VideoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Videos.
     * @param {VideoDeleteManyArgs} args - Arguments to filter Videos to delete.
     * @example
     * // Delete a few Videos
     * const { count } = await prisma.video.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VideoDeleteManyArgs>(args?: SelectSubset<T, VideoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Videos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Videos
     * const video = await prisma.video.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VideoUpdateManyArgs>(args: SelectSubset<T, VideoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Videos and returns the data updated in the database.
     * @param {VideoUpdateManyAndReturnArgs} args - Arguments to update many Videos.
     * @example
     * // Update many Videos
     * const video = await prisma.video.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Videos and only return the `id`
     * const videoWithIdOnly = await prisma.video.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends VideoUpdateManyAndReturnArgs>(args: SelectSubset<T, VideoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VideoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Video.
     * @param {VideoUpsertArgs} args - Arguments to update or create a Video.
     * @example
     * // Update or create a Video
     * const video = await prisma.video.upsert({
     *   create: {
     *     // ... data to create a Video
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Video we want to update
     *   }
     * })
     */
    upsert<T extends VideoUpsertArgs>(args: SelectSubset<T, VideoUpsertArgs<ExtArgs>>): Prisma__VideoClient<$Result.GetResult<Prisma.$VideoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Videos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoCountArgs} args - Arguments to filter Videos to count.
     * @example
     * // Count the number of Videos
     * const count = await prisma.video.count({
     *   where: {
     *     // ... the filter for the Videos we want to count
     *   }
     * })
    **/
    count<T extends VideoCountArgs>(
      args?: Subset<T, VideoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VideoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Video.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VideoAggregateArgs>(args: Subset<T, VideoAggregateArgs>): Prisma.PrismaPromise<GetVideoAggregateType<T>>

    /**
     * Group by Video.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VideoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VideoGroupByArgs['orderBy'] }
        : { orderBy?: VideoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VideoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVideoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Video model
   */
  readonly fields: VideoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Video.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VideoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    flashCardSet<T extends FlashCardSetDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FlashCardSetDefaultArgs<ExtArgs>>): Prisma__FlashCardSetClient<$Result.GetResult<Prisma.$FlashCardSetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Video model
   */
  interface VideoFieldRefs {
    readonly id: FieldRef<"Video", 'String'>
    readonly flashCardSetID: FieldRef<"Video", 'String'>
    readonly dateCreated: FieldRef<"Video", 'DateTime'>
    readonly watched: FieldRef<"Video", 'Boolean'>
    readonly url: FieldRef<"Video", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Video findUnique
   */
  export type VideoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Video
     */
    omit?: VideoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VideoInclude<ExtArgs> | null
    /**
     * Filter, which Video to fetch.
     */
    where: VideoWhereUniqueInput
  }

  /**
   * Video findUniqueOrThrow
   */
  export type VideoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Video
     */
    omit?: VideoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VideoInclude<ExtArgs> | null
    /**
     * Filter, which Video to fetch.
     */
    where: VideoWhereUniqueInput
  }

  /**
   * Video findFirst
   */
  export type VideoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Video
     */
    omit?: VideoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VideoInclude<ExtArgs> | null
    /**
     * Filter, which Video to fetch.
     */
    where?: VideoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Videos to fetch.
     */
    orderBy?: VideoOrderByWithRelationInput | VideoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Videos.
     */
    cursor?: VideoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Videos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Videos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Videos.
     */
    distinct?: VideoScalarFieldEnum | VideoScalarFieldEnum[]
  }

  /**
   * Video findFirstOrThrow
   */
  export type VideoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Video
     */
    omit?: VideoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VideoInclude<ExtArgs> | null
    /**
     * Filter, which Video to fetch.
     */
    where?: VideoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Videos to fetch.
     */
    orderBy?: VideoOrderByWithRelationInput | VideoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Videos.
     */
    cursor?: VideoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Videos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Videos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Videos.
     */
    distinct?: VideoScalarFieldEnum | VideoScalarFieldEnum[]
  }

  /**
   * Video findMany
   */
  export type VideoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Video
     */
    omit?: VideoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VideoInclude<ExtArgs> | null
    /**
     * Filter, which Videos to fetch.
     */
    where?: VideoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Videos to fetch.
     */
    orderBy?: VideoOrderByWithRelationInput | VideoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Videos.
     */
    cursor?: VideoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Videos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Videos.
     */
    skip?: number
    distinct?: VideoScalarFieldEnum | VideoScalarFieldEnum[]
  }

  /**
   * Video create
   */
  export type VideoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Video
     */
    omit?: VideoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VideoInclude<ExtArgs> | null
    /**
     * The data needed to create a Video.
     */
    data: XOR<VideoCreateInput, VideoUncheckedCreateInput>
  }

  /**
   * Video createMany
   */
  export type VideoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Videos.
     */
    data: VideoCreateManyInput | VideoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Video createManyAndReturn
   */
  export type VideoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Video
     */
    omit?: VideoOmit<ExtArgs> | null
    /**
     * The data used to create many Videos.
     */
    data: VideoCreateManyInput | VideoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VideoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Video update
   */
  export type VideoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Video
     */
    omit?: VideoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VideoInclude<ExtArgs> | null
    /**
     * The data needed to update a Video.
     */
    data: XOR<VideoUpdateInput, VideoUncheckedUpdateInput>
    /**
     * Choose, which Video to update.
     */
    where: VideoWhereUniqueInput
  }

  /**
   * Video updateMany
   */
  export type VideoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Videos.
     */
    data: XOR<VideoUpdateManyMutationInput, VideoUncheckedUpdateManyInput>
    /**
     * Filter which Videos to update
     */
    where?: VideoWhereInput
    /**
     * Limit how many Videos to update.
     */
    limit?: number
  }

  /**
   * Video updateManyAndReturn
   */
  export type VideoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Video
     */
    omit?: VideoOmit<ExtArgs> | null
    /**
     * The data used to update Videos.
     */
    data: XOR<VideoUpdateManyMutationInput, VideoUncheckedUpdateManyInput>
    /**
     * Filter which Videos to update
     */
    where?: VideoWhereInput
    /**
     * Limit how many Videos to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VideoIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Video upsert
   */
  export type VideoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Video
     */
    omit?: VideoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VideoInclude<ExtArgs> | null
    /**
     * The filter to search for the Video to update in case it exists.
     */
    where: VideoWhereUniqueInput
    /**
     * In case the Video found by the `where` argument doesn't exist, create a new Video with this data.
     */
    create: XOR<VideoCreateInput, VideoUncheckedCreateInput>
    /**
     * In case the Video was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VideoUpdateInput, VideoUncheckedUpdateInput>
  }

  /**
   * Video delete
   */
  export type VideoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Video
     */
    omit?: VideoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VideoInclude<ExtArgs> | null
    /**
     * Filter which Video to delete.
     */
    where: VideoWhereUniqueInput
  }

  /**
   * Video deleteMany
   */
  export type VideoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Videos to delete
     */
    where?: VideoWhereInput
    /**
     * Limit how many Videos to delete.
     */
    limit?: number
  }

  /**
   * Video without action
   */
  export type VideoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Video
     */
    omit?: VideoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VideoInclude<ExtArgs> | null
  }


  /**
   * Model PracticeQuestion
   */

  export type AggregatePracticeQuestion = {
    _count: PracticeQuestionCountAggregateOutputType | null
    _avg: PracticeQuestionAvgAggregateOutputType | null
    _sum: PracticeQuestionSumAggregateOutputType | null
    _min: PracticeQuestionMinAggregateOutputType | null
    _max: PracticeQuestionMaxAggregateOutputType | null
  }

  export type PracticeQuestionAvgAggregateOutputType = {
    timesAnsweredRight: number | null
    timesAnsweredWrong: number | null
  }

  export type PracticeQuestionSumAggregateOutputType = {
    timesAnsweredRight: number | null
    timesAnsweredWrong: number | null
  }

  export type PracticeQuestionMinAggregateOutputType = {
    id: string | null
    flashCardSetID: string | null
    question: string | null
    timesAnsweredRight: number | null
    timesAnsweredWrong: number | null
    image: string | null
    type: $Enums.QuestionType | null
  }

  export type PracticeQuestionMaxAggregateOutputType = {
    id: string | null
    flashCardSetID: string | null
    question: string | null
    timesAnsweredRight: number | null
    timesAnsweredWrong: number | null
    image: string | null
    type: $Enums.QuestionType | null
  }

  export type PracticeQuestionCountAggregateOutputType = {
    id: number
    flashCardSetID: number
    question: number
    answer: number
    options: number
    timesAnsweredRight: number
    timesAnsweredWrong: number
    image: number
    type: number
    _all: number
  }


  export type PracticeQuestionAvgAggregateInputType = {
    timesAnsweredRight?: true
    timesAnsweredWrong?: true
  }

  export type PracticeQuestionSumAggregateInputType = {
    timesAnsweredRight?: true
    timesAnsweredWrong?: true
  }

  export type PracticeQuestionMinAggregateInputType = {
    id?: true
    flashCardSetID?: true
    question?: true
    timesAnsweredRight?: true
    timesAnsweredWrong?: true
    image?: true
    type?: true
  }

  export type PracticeQuestionMaxAggregateInputType = {
    id?: true
    flashCardSetID?: true
    question?: true
    timesAnsweredRight?: true
    timesAnsweredWrong?: true
    image?: true
    type?: true
  }

  export type PracticeQuestionCountAggregateInputType = {
    id?: true
    flashCardSetID?: true
    question?: true
    answer?: true
    options?: true
    timesAnsweredRight?: true
    timesAnsweredWrong?: true
    image?: true
    type?: true
    _all?: true
  }

  export type PracticeQuestionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PracticeQuestion to aggregate.
     */
    where?: PracticeQuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PracticeQuestions to fetch.
     */
    orderBy?: PracticeQuestionOrderByWithRelationInput | PracticeQuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PracticeQuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PracticeQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PracticeQuestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PracticeQuestions
    **/
    _count?: true | PracticeQuestionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PracticeQuestionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PracticeQuestionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PracticeQuestionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PracticeQuestionMaxAggregateInputType
  }

  export type GetPracticeQuestionAggregateType<T extends PracticeQuestionAggregateArgs> = {
        [P in keyof T & keyof AggregatePracticeQuestion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePracticeQuestion[P]>
      : GetScalarType<T[P], AggregatePracticeQuestion[P]>
  }




  export type PracticeQuestionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PracticeQuestionWhereInput
    orderBy?: PracticeQuestionOrderByWithAggregationInput | PracticeQuestionOrderByWithAggregationInput[]
    by: PracticeQuestionScalarFieldEnum[] | PracticeQuestionScalarFieldEnum
    having?: PracticeQuestionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PracticeQuestionCountAggregateInputType | true
    _avg?: PracticeQuestionAvgAggregateInputType
    _sum?: PracticeQuestionSumAggregateInputType
    _min?: PracticeQuestionMinAggregateInputType
    _max?: PracticeQuestionMaxAggregateInputType
  }

  export type PracticeQuestionGroupByOutputType = {
    id: string
    flashCardSetID: string
    question: string
    answer: string[]
    options: JsonValue | null
    timesAnsweredRight: number
    timesAnsweredWrong: number
    image: string | null
    type: $Enums.QuestionType
    _count: PracticeQuestionCountAggregateOutputType | null
    _avg: PracticeQuestionAvgAggregateOutputType | null
    _sum: PracticeQuestionSumAggregateOutputType | null
    _min: PracticeQuestionMinAggregateOutputType | null
    _max: PracticeQuestionMaxAggregateOutputType | null
  }

  type GetPracticeQuestionGroupByPayload<T extends PracticeQuestionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PracticeQuestionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PracticeQuestionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PracticeQuestionGroupByOutputType[P]>
            : GetScalarType<T[P], PracticeQuestionGroupByOutputType[P]>
        }
      >
    >


  export type PracticeQuestionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    flashCardSetID?: boolean
    question?: boolean
    answer?: boolean
    options?: boolean
    timesAnsweredRight?: boolean
    timesAnsweredWrong?: boolean
    image?: boolean
    type?: boolean
    flashCardSet?: boolean | FlashCardSetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["practiceQuestion"]>

  export type PracticeQuestionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    flashCardSetID?: boolean
    question?: boolean
    answer?: boolean
    options?: boolean
    timesAnsweredRight?: boolean
    timesAnsweredWrong?: boolean
    image?: boolean
    type?: boolean
    flashCardSet?: boolean | FlashCardSetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["practiceQuestion"]>

  export type PracticeQuestionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    flashCardSetID?: boolean
    question?: boolean
    answer?: boolean
    options?: boolean
    timesAnsweredRight?: boolean
    timesAnsweredWrong?: boolean
    image?: boolean
    type?: boolean
    flashCardSet?: boolean | FlashCardSetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["practiceQuestion"]>

  export type PracticeQuestionSelectScalar = {
    id?: boolean
    flashCardSetID?: boolean
    question?: boolean
    answer?: boolean
    options?: boolean
    timesAnsweredRight?: boolean
    timesAnsweredWrong?: boolean
    image?: boolean
    type?: boolean
  }

  export type PracticeQuestionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "flashCardSetID" | "question" | "answer" | "options" | "timesAnsweredRight" | "timesAnsweredWrong" | "image" | "type", ExtArgs["result"]["practiceQuestion"]>
  export type PracticeQuestionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    flashCardSet?: boolean | FlashCardSetDefaultArgs<ExtArgs>
  }
  export type PracticeQuestionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    flashCardSet?: boolean | FlashCardSetDefaultArgs<ExtArgs>
  }
  export type PracticeQuestionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    flashCardSet?: boolean | FlashCardSetDefaultArgs<ExtArgs>
  }

  export type $PracticeQuestionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PracticeQuestion"
    objects: {
      flashCardSet: Prisma.$FlashCardSetPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      flashCardSetID: string
      question: string
      answer: string[]
      options: Prisma.JsonValue | null
      timesAnsweredRight: number
      timesAnsweredWrong: number
      image: string | null
      type: $Enums.QuestionType
    }, ExtArgs["result"]["practiceQuestion"]>
    composites: {}
  }

  type PracticeQuestionGetPayload<S extends boolean | null | undefined | PracticeQuestionDefaultArgs> = $Result.GetResult<Prisma.$PracticeQuestionPayload, S>

  type PracticeQuestionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PracticeQuestionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PracticeQuestionCountAggregateInputType | true
    }

  export interface PracticeQuestionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PracticeQuestion'], meta: { name: 'PracticeQuestion' } }
    /**
     * Find zero or one PracticeQuestion that matches the filter.
     * @param {PracticeQuestionFindUniqueArgs} args - Arguments to find a PracticeQuestion
     * @example
     * // Get one PracticeQuestion
     * const practiceQuestion = await prisma.practiceQuestion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PracticeQuestionFindUniqueArgs>(args: SelectSubset<T, PracticeQuestionFindUniqueArgs<ExtArgs>>): Prisma__PracticeQuestionClient<$Result.GetResult<Prisma.$PracticeQuestionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PracticeQuestion that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PracticeQuestionFindUniqueOrThrowArgs} args - Arguments to find a PracticeQuestion
     * @example
     * // Get one PracticeQuestion
     * const practiceQuestion = await prisma.practiceQuestion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PracticeQuestionFindUniqueOrThrowArgs>(args: SelectSubset<T, PracticeQuestionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PracticeQuestionClient<$Result.GetResult<Prisma.$PracticeQuestionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PracticeQuestion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticeQuestionFindFirstArgs} args - Arguments to find a PracticeQuestion
     * @example
     * // Get one PracticeQuestion
     * const practiceQuestion = await prisma.practiceQuestion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PracticeQuestionFindFirstArgs>(args?: SelectSubset<T, PracticeQuestionFindFirstArgs<ExtArgs>>): Prisma__PracticeQuestionClient<$Result.GetResult<Prisma.$PracticeQuestionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PracticeQuestion that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticeQuestionFindFirstOrThrowArgs} args - Arguments to find a PracticeQuestion
     * @example
     * // Get one PracticeQuestion
     * const practiceQuestion = await prisma.practiceQuestion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PracticeQuestionFindFirstOrThrowArgs>(args?: SelectSubset<T, PracticeQuestionFindFirstOrThrowArgs<ExtArgs>>): Prisma__PracticeQuestionClient<$Result.GetResult<Prisma.$PracticeQuestionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PracticeQuestions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticeQuestionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PracticeQuestions
     * const practiceQuestions = await prisma.practiceQuestion.findMany()
     * 
     * // Get first 10 PracticeQuestions
     * const practiceQuestions = await prisma.practiceQuestion.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const practiceQuestionWithIdOnly = await prisma.practiceQuestion.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PracticeQuestionFindManyArgs>(args?: SelectSubset<T, PracticeQuestionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PracticeQuestionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PracticeQuestion.
     * @param {PracticeQuestionCreateArgs} args - Arguments to create a PracticeQuestion.
     * @example
     * // Create one PracticeQuestion
     * const PracticeQuestion = await prisma.practiceQuestion.create({
     *   data: {
     *     // ... data to create a PracticeQuestion
     *   }
     * })
     * 
     */
    create<T extends PracticeQuestionCreateArgs>(args: SelectSubset<T, PracticeQuestionCreateArgs<ExtArgs>>): Prisma__PracticeQuestionClient<$Result.GetResult<Prisma.$PracticeQuestionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PracticeQuestions.
     * @param {PracticeQuestionCreateManyArgs} args - Arguments to create many PracticeQuestions.
     * @example
     * // Create many PracticeQuestions
     * const practiceQuestion = await prisma.practiceQuestion.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PracticeQuestionCreateManyArgs>(args?: SelectSubset<T, PracticeQuestionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PracticeQuestions and returns the data saved in the database.
     * @param {PracticeQuestionCreateManyAndReturnArgs} args - Arguments to create many PracticeQuestions.
     * @example
     * // Create many PracticeQuestions
     * const practiceQuestion = await prisma.practiceQuestion.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PracticeQuestions and only return the `id`
     * const practiceQuestionWithIdOnly = await prisma.practiceQuestion.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PracticeQuestionCreateManyAndReturnArgs>(args?: SelectSubset<T, PracticeQuestionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PracticeQuestionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PracticeQuestion.
     * @param {PracticeQuestionDeleteArgs} args - Arguments to delete one PracticeQuestion.
     * @example
     * // Delete one PracticeQuestion
     * const PracticeQuestion = await prisma.practiceQuestion.delete({
     *   where: {
     *     // ... filter to delete one PracticeQuestion
     *   }
     * })
     * 
     */
    delete<T extends PracticeQuestionDeleteArgs>(args: SelectSubset<T, PracticeQuestionDeleteArgs<ExtArgs>>): Prisma__PracticeQuestionClient<$Result.GetResult<Prisma.$PracticeQuestionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PracticeQuestion.
     * @param {PracticeQuestionUpdateArgs} args - Arguments to update one PracticeQuestion.
     * @example
     * // Update one PracticeQuestion
     * const practiceQuestion = await prisma.practiceQuestion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PracticeQuestionUpdateArgs>(args: SelectSubset<T, PracticeQuestionUpdateArgs<ExtArgs>>): Prisma__PracticeQuestionClient<$Result.GetResult<Prisma.$PracticeQuestionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PracticeQuestions.
     * @param {PracticeQuestionDeleteManyArgs} args - Arguments to filter PracticeQuestions to delete.
     * @example
     * // Delete a few PracticeQuestions
     * const { count } = await prisma.practiceQuestion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PracticeQuestionDeleteManyArgs>(args?: SelectSubset<T, PracticeQuestionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PracticeQuestions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticeQuestionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PracticeQuestions
     * const practiceQuestion = await prisma.practiceQuestion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PracticeQuestionUpdateManyArgs>(args: SelectSubset<T, PracticeQuestionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PracticeQuestions and returns the data updated in the database.
     * @param {PracticeQuestionUpdateManyAndReturnArgs} args - Arguments to update many PracticeQuestions.
     * @example
     * // Update many PracticeQuestions
     * const practiceQuestion = await prisma.practiceQuestion.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PracticeQuestions and only return the `id`
     * const practiceQuestionWithIdOnly = await prisma.practiceQuestion.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PracticeQuestionUpdateManyAndReturnArgs>(args: SelectSubset<T, PracticeQuestionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PracticeQuestionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PracticeQuestion.
     * @param {PracticeQuestionUpsertArgs} args - Arguments to update or create a PracticeQuestion.
     * @example
     * // Update or create a PracticeQuestion
     * const practiceQuestion = await prisma.practiceQuestion.upsert({
     *   create: {
     *     // ... data to create a PracticeQuestion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PracticeQuestion we want to update
     *   }
     * })
     */
    upsert<T extends PracticeQuestionUpsertArgs>(args: SelectSubset<T, PracticeQuestionUpsertArgs<ExtArgs>>): Prisma__PracticeQuestionClient<$Result.GetResult<Prisma.$PracticeQuestionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PracticeQuestions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticeQuestionCountArgs} args - Arguments to filter PracticeQuestions to count.
     * @example
     * // Count the number of PracticeQuestions
     * const count = await prisma.practiceQuestion.count({
     *   where: {
     *     // ... the filter for the PracticeQuestions we want to count
     *   }
     * })
    **/
    count<T extends PracticeQuestionCountArgs>(
      args?: Subset<T, PracticeQuestionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PracticeQuestionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PracticeQuestion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticeQuestionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PracticeQuestionAggregateArgs>(args: Subset<T, PracticeQuestionAggregateArgs>): Prisma.PrismaPromise<GetPracticeQuestionAggregateType<T>>

    /**
     * Group by PracticeQuestion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticeQuestionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PracticeQuestionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PracticeQuestionGroupByArgs['orderBy'] }
        : { orderBy?: PracticeQuestionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PracticeQuestionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPracticeQuestionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PracticeQuestion model
   */
  readonly fields: PracticeQuestionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PracticeQuestion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PracticeQuestionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    flashCardSet<T extends FlashCardSetDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FlashCardSetDefaultArgs<ExtArgs>>): Prisma__FlashCardSetClient<$Result.GetResult<Prisma.$FlashCardSetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PracticeQuestion model
   */
  interface PracticeQuestionFieldRefs {
    readonly id: FieldRef<"PracticeQuestion", 'String'>
    readonly flashCardSetID: FieldRef<"PracticeQuestion", 'String'>
    readonly question: FieldRef<"PracticeQuestion", 'String'>
    readonly answer: FieldRef<"PracticeQuestion", 'String[]'>
    readonly options: FieldRef<"PracticeQuestion", 'Json'>
    readonly timesAnsweredRight: FieldRef<"PracticeQuestion", 'Int'>
    readonly timesAnsweredWrong: FieldRef<"PracticeQuestion", 'Int'>
    readonly image: FieldRef<"PracticeQuestion", 'String'>
    readonly type: FieldRef<"PracticeQuestion", 'QuestionType'>
  }
    

  // Custom InputTypes
  /**
   * PracticeQuestion findUnique
   */
  export type PracticeQuestionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticeQuestion
     */
    select?: PracticeQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PracticeQuestion
     */
    omit?: PracticeQuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeQuestionInclude<ExtArgs> | null
    /**
     * Filter, which PracticeQuestion to fetch.
     */
    where: PracticeQuestionWhereUniqueInput
  }

  /**
   * PracticeQuestion findUniqueOrThrow
   */
  export type PracticeQuestionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticeQuestion
     */
    select?: PracticeQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PracticeQuestion
     */
    omit?: PracticeQuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeQuestionInclude<ExtArgs> | null
    /**
     * Filter, which PracticeQuestion to fetch.
     */
    where: PracticeQuestionWhereUniqueInput
  }

  /**
   * PracticeQuestion findFirst
   */
  export type PracticeQuestionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticeQuestion
     */
    select?: PracticeQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PracticeQuestion
     */
    omit?: PracticeQuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeQuestionInclude<ExtArgs> | null
    /**
     * Filter, which PracticeQuestion to fetch.
     */
    where?: PracticeQuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PracticeQuestions to fetch.
     */
    orderBy?: PracticeQuestionOrderByWithRelationInput | PracticeQuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PracticeQuestions.
     */
    cursor?: PracticeQuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PracticeQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PracticeQuestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PracticeQuestions.
     */
    distinct?: PracticeQuestionScalarFieldEnum | PracticeQuestionScalarFieldEnum[]
  }

  /**
   * PracticeQuestion findFirstOrThrow
   */
  export type PracticeQuestionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticeQuestion
     */
    select?: PracticeQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PracticeQuestion
     */
    omit?: PracticeQuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeQuestionInclude<ExtArgs> | null
    /**
     * Filter, which PracticeQuestion to fetch.
     */
    where?: PracticeQuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PracticeQuestions to fetch.
     */
    orderBy?: PracticeQuestionOrderByWithRelationInput | PracticeQuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PracticeQuestions.
     */
    cursor?: PracticeQuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PracticeQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PracticeQuestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PracticeQuestions.
     */
    distinct?: PracticeQuestionScalarFieldEnum | PracticeQuestionScalarFieldEnum[]
  }

  /**
   * PracticeQuestion findMany
   */
  export type PracticeQuestionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticeQuestion
     */
    select?: PracticeQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PracticeQuestion
     */
    omit?: PracticeQuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeQuestionInclude<ExtArgs> | null
    /**
     * Filter, which PracticeQuestions to fetch.
     */
    where?: PracticeQuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PracticeQuestions to fetch.
     */
    orderBy?: PracticeQuestionOrderByWithRelationInput | PracticeQuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PracticeQuestions.
     */
    cursor?: PracticeQuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PracticeQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PracticeQuestions.
     */
    skip?: number
    distinct?: PracticeQuestionScalarFieldEnum | PracticeQuestionScalarFieldEnum[]
  }

  /**
   * PracticeQuestion create
   */
  export type PracticeQuestionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticeQuestion
     */
    select?: PracticeQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PracticeQuestion
     */
    omit?: PracticeQuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeQuestionInclude<ExtArgs> | null
    /**
     * The data needed to create a PracticeQuestion.
     */
    data: XOR<PracticeQuestionCreateInput, PracticeQuestionUncheckedCreateInput>
  }

  /**
   * PracticeQuestion createMany
   */
  export type PracticeQuestionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PracticeQuestions.
     */
    data: PracticeQuestionCreateManyInput | PracticeQuestionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PracticeQuestion createManyAndReturn
   */
  export type PracticeQuestionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticeQuestion
     */
    select?: PracticeQuestionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PracticeQuestion
     */
    omit?: PracticeQuestionOmit<ExtArgs> | null
    /**
     * The data used to create many PracticeQuestions.
     */
    data: PracticeQuestionCreateManyInput | PracticeQuestionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeQuestionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PracticeQuestion update
   */
  export type PracticeQuestionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticeQuestion
     */
    select?: PracticeQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PracticeQuestion
     */
    omit?: PracticeQuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeQuestionInclude<ExtArgs> | null
    /**
     * The data needed to update a PracticeQuestion.
     */
    data: XOR<PracticeQuestionUpdateInput, PracticeQuestionUncheckedUpdateInput>
    /**
     * Choose, which PracticeQuestion to update.
     */
    where: PracticeQuestionWhereUniqueInput
  }

  /**
   * PracticeQuestion updateMany
   */
  export type PracticeQuestionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PracticeQuestions.
     */
    data: XOR<PracticeQuestionUpdateManyMutationInput, PracticeQuestionUncheckedUpdateManyInput>
    /**
     * Filter which PracticeQuestions to update
     */
    where?: PracticeQuestionWhereInput
    /**
     * Limit how many PracticeQuestions to update.
     */
    limit?: number
  }

  /**
   * PracticeQuestion updateManyAndReturn
   */
  export type PracticeQuestionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticeQuestion
     */
    select?: PracticeQuestionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PracticeQuestion
     */
    omit?: PracticeQuestionOmit<ExtArgs> | null
    /**
     * The data used to update PracticeQuestions.
     */
    data: XOR<PracticeQuestionUpdateManyMutationInput, PracticeQuestionUncheckedUpdateManyInput>
    /**
     * Filter which PracticeQuestions to update
     */
    where?: PracticeQuestionWhereInput
    /**
     * Limit how many PracticeQuestions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeQuestionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PracticeQuestion upsert
   */
  export type PracticeQuestionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticeQuestion
     */
    select?: PracticeQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PracticeQuestion
     */
    omit?: PracticeQuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeQuestionInclude<ExtArgs> | null
    /**
     * The filter to search for the PracticeQuestion to update in case it exists.
     */
    where: PracticeQuestionWhereUniqueInput
    /**
     * In case the PracticeQuestion found by the `where` argument doesn't exist, create a new PracticeQuestion with this data.
     */
    create: XOR<PracticeQuestionCreateInput, PracticeQuestionUncheckedCreateInput>
    /**
     * In case the PracticeQuestion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PracticeQuestionUpdateInput, PracticeQuestionUncheckedUpdateInput>
  }

  /**
   * PracticeQuestion delete
   */
  export type PracticeQuestionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticeQuestion
     */
    select?: PracticeQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PracticeQuestion
     */
    omit?: PracticeQuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeQuestionInclude<ExtArgs> | null
    /**
     * Filter which PracticeQuestion to delete.
     */
    where: PracticeQuestionWhereUniqueInput
  }

  /**
   * PracticeQuestion deleteMany
   */
  export type PracticeQuestionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PracticeQuestions to delete
     */
    where?: PracticeQuestionWhereInput
    /**
     * Limit how many PracticeQuestions to delete.
     */
    limit?: number
  }

  /**
   * PracticeQuestion without action
   */
  export type PracticeQuestionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticeQuestion
     */
    select?: PracticeQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PracticeQuestion
     */
    omit?: PracticeQuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeQuestionInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    username: 'username',
    password: 'password',
    dateCreated: 'dateCreated'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const StudyGuideScalarFieldEnum: {
    id: 'id',
    tag: 'tag',
    name: 'name',
    dateCreated: 'dateCreated',
    lastModified: 'lastModified',
    completedBy: 'completedBy',
    completed: 'completed',
    userID: 'userID'
  };

  export type StudyGuideScalarFieldEnum = (typeof StudyGuideScalarFieldEnum)[keyof typeof StudyGuideScalarFieldEnum]


  export const FlashCardSetScalarFieldEnum: {
    id: 'id',
    name: 'name',
    tag: 'tag',
    dateCreated: 'dateCreated',
    lastModified: 'lastModified',
    studyGuideID: 'studyGuideID'
  };

  export type FlashCardSetScalarFieldEnum = (typeof FlashCardSetScalarFieldEnum)[keyof typeof FlashCardSetScalarFieldEnum]


  export const FlashCardScalarFieldEnum: {
    id: 'id',
    frontContent: 'frontContent',
    backContent: 'backContent',
    cardIndex: 'cardIndex',
    flashCardSetID: 'flashCardSetID',
    learnedCount: 'learnedCount',
    lastLearned: 'lastLearned',
    image: 'image'
  };

  export type FlashCardScalarFieldEnum = (typeof FlashCardScalarFieldEnum)[keyof typeof FlashCardScalarFieldEnum]


  export const VideoScalarFieldEnum: {
    id: 'id',
    flashCardSetID: 'flashCardSetID',
    dateCreated: 'dateCreated',
    watched: 'watched',
    url: 'url'
  };

  export type VideoScalarFieldEnum = (typeof VideoScalarFieldEnum)[keyof typeof VideoScalarFieldEnum]


  export const PracticeQuestionScalarFieldEnum: {
    id: 'id',
    flashCardSetID: 'flashCardSetID',
    question: 'question',
    answer: 'answer',
    options: 'options',
    timesAnsweredRight: 'timesAnsweredRight',
    timesAnsweredWrong: 'timesAnsweredWrong',
    image: 'image',
    type: 'type'
  };

  export type PracticeQuestionScalarFieldEnum = (typeof PracticeQuestionScalarFieldEnum)[keyof typeof PracticeQuestionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'QuestionType'
   */
  export type EnumQuestionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QuestionType'>
    


  /**
   * Reference to a field of type 'QuestionType[]'
   */
  export type ListEnumQuestionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QuestionType[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    dateCreated?: DateTimeFilter<"User"> | Date | string
    studyguides?: StudyGuideListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    dateCreated?: SortOrder
    studyguides?: StudyGuideOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    username?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    dateCreated?: DateTimeFilter<"User"> | Date | string
    studyguides?: StudyGuideListRelationFilter
  }, "id" | "email" | "username">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    dateCreated?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    username?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    dateCreated?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type StudyGuideWhereInput = {
    AND?: StudyGuideWhereInput | StudyGuideWhereInput[]
    OR?: StudyGuideWhereInput[]
    NOT?: StudyGuideWhereInput | StudyGuideWhereInput[]
    id?: StringFilter<"StudyGuide"> | string
    tag?: StringNullableFilter<"StudyGuide"> | string | null
    name?: StringFilter<"StudyGuide"> | string
    dateCreated?: DateTimeFilter<"StudyGuide"> | Date | string
    lastModified?: DateTimeFilter<"StudyGuide"> | Date | string
    completedBy?: DateTimeNullableFilter<"StudyGuide"> | Date | string | null
    completed?: BoolFilter<"StudyGuide"> | boolean
    userID?: StringFilter<"StudyGuide"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    flashCardSets?: FlashCardSetListRelationFilter
  }

  export type StudyGuideOrderByWithRelationInput = {
    id?: SortOrder
    tag?: SortOrderInput | SortOrder
    name?: SortOrder
    dateCreated?: SortOrder
    lastModified?: SortOrder
    completedBy?: SortOrderInput | SortOrder
    completed?: SortOrder
    userID?: SortOrder
    user?: UserOrderByWithRelationInput
    flashCardSets?: FlashCardSetOrderByRelationAggregateInput
  }

  export type StudyGuideWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name_userID?: StudyGuideNameUserIDCompoundUniqueInput
    AND?: StudyGuideWhereInput | StudyGuideWhereInput[]
    OR?: StudyGuideWhereInput[]
    NOT?: StudyGuideWhereInput | StudyGuideWhereInput[]
    tag?: StringNullableFilter<"StudyGuide"> | string | null
    name?: StringFilter<"StudyGuide"> | string
    dateCreated?: DateTimeFilter<"StudyGuide"> | Date | string
    lastModified?: DateTimeFilter<"StudyGuide"> | Date | string
    completedBy?: DateTimeNullableFilter<"StudyGuide"> | Date | string | null
    completed?: BoolFilter<"StudyGuide"> | boolean
    userID?: StringFilter<"StudyGuide"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    flashCardSets?: FlashCardSetListRelationFilter
  }, "id" | "name_userID">

  export type StudyGuideOrderByWithAggregationInput = {
    id?: SortOrder
    tag?: SortOrderInput | SortOrder
    name?: SortOrder
    dateCreated?: SortOrder
    lastModified?: SortOrder
    completedBy?: SortOrderInput | SortOrder
    completed?: SortOrder
    userID?: SortOrder
    _count?: StudyGuideCountOrderByAggregateInput
    _max?: StudyGuideMaxOrderByAggregateInput
    _min?: StudyGuideMinOrderByAggregateInput
  }

  export type StudyGuideScalarWhereWithAggregatesInput = {
    AND?: StudyGuideScalarWhereWithAggregatesInput | StudyGuideScalarWhereWithAggregatesInput[]
    OR?: StudyGuideScalarWhereWithAggregatesInput[]
    NOT?: StudyGuideScalarWhereWithAggregatesInput | StudyGuideScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"StudyGuide"> | string
    tag?: StringNullableWithAggregatesFilter<"StudyGuide"> | string | null
    name?: StringWithAggregatesFilter<"StudyGuide"> | string
    dateCreated?: DateTimeWithAggregatesFilter<"StudyGuide"> | Date | string
    lastModified?: DateTimeWithAggregatesFilter<"StudyGuide"> | Date | string
    completedBy?: DateTimeNullableWithAggregatesFilter<"StudyGuide"> | Date | string | null
    completed?: BoolWithAggregatesFilter<"StudyGuide"> | boolean
    userID?: StringWithAggregatesFilter<"StudyGuide"> | string
  }

  export type FlashCardSetWhereInput = {
    AND?: FlashCardSetWhereInput | FlashCardSetWhereInput[]
    OR?: FlashCardSetWhereInput[]
    NOT?: FlashCardSetWhereInput | FlashCardSetWhereInput[]
    id?: StringFilter<"FlashCardSet"> | string
    name?: StringFilter<"FlashCardSet"> | string
    tag?: StringNullableFilter<"FlashCardSet"> | string | null
    dateCreated?: DateTimeFilter<"FlashCardSet"> | Date | string
    lastModified?: DateTimeFilter<"FlashCardSet"> | Date | string
    studyGuideID?: StringFilter<"FlashCardSet"> | string
    studyGuide?: XOR<StudyGuideScalarRelationFilter, StudyGuideWhereInput>
    flashCards?: FlashCardListRelationFilter
    videos?: VideoListRelationFilter
    practiceQuestions?: PracticeQuestionListRelationFilter
  }

  export type FlashCardSetOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    tag?: SortOrderInput | SortOrder
    dateCreated?: SortOrder
    lastModified?: SortOrder
    studyGuideID?: SortOrder
    studyGuide?: StudyGuideOrderByWithRelationInput
    flashCards?: FlashCardOrderByRelationAggregateInput
    videos?: VideoOrderByRelationAggregateInput
    practiceQuestions?: PracticeQuestionOrderByRelationAggregateInput
  }

  export type FlashCardSetWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name_studyGuideID?: FlashCardSetNameStudyGuideIDCompoundUniqueInput
    AND?: FlashCardSetWhereInput | FlashCardSetWhereInput[]
    OR?: FlashCardSetWhereInput[]
    NOT?: FlashCardSetWhereInput | FlashCardSetWhereInput[]
    name?: StringFilter<"FlashCardSet"> | string
    tag?: StringNullableFilter<"FlashCardSet"> | string | null
    dateCreated?: DateTimeFilter<"FlashCardSet"> | Date | string
    lastModified?: DateTimeFilter<"FlashCardSet"> | Date | string
    studyGuideID?: StringFilter<"FlashCardSet"> | string
    studyGuide?: XOR<StudyGuideScalarRelationFilter, StudyGuideWhereInput>
    flashCards?: FlashCardListRelationFilter
    videos?: VideoListRelationFilter
    practiceQuestions?: PracticeQuestionListRelationFilter
  }, "id" | "name_studyGuideID">

  export type FlashCardSetOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    tag?: SortOrderInput | SortOrder
    dateCreated?: SortOrder
    lastModified?: SortOrder
    studyGuideID?: SortOrder
    _count?: FlashCardSetCountOrderByAggregateInput
    _max?: FlashCardSetMaxOrderByAggregateInput
    _min?: FlashCardSetMinOrderByAggregateInput
  }

  export type FlashCardSetScalarWhereWithAggregatesInput = {
    AND?: FlashCardSetScalarWhereWithAggregatesInput | FlashCardSetScalarWhereWithAggregatesInput[]
    OR?: FlashCardSetScalarWhereWithAggregatesInput[]
    NOT?: FlashCardSetScalarWhereWithAggregatesInput | FlashCardSetScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FlashCardSet"> | string
    name?: StringWithAggregatesFilter<"FlashCardSet"> | string
    tag?: StringNullableWithAggregatesFilter<"FlashCardSet"> | string | null
    dateCreated?: DateTimeWithAggregatesFilter<"FlashCardSet"> | Date | string
    lastModified?: DateTimeWithAggregatesFilter<"FlashCardSet"> | Date | string
    studyGuideID?: StringWithAggregatesFilter<"FlashCardSet"> | string
  }

  export type FlashCardWhereInput = {
    AND?: FlashCardWhereInput | FlashCardWhereInput[]
    OR?: FlashCardWhereInput[]
    NOT?: FlashCardWhereInput | FlashCardWhereInput[]
    id?: StringFilter<"FlashCard"> | string
    frontContent?: StringFilter<"FlashCard"> | string
    backContent?: StringFilter<"FlashCard"> | string
    cardIndex?: IntFilter<"FlashCard"> | number
    flashCardSetID?: StringFilter<"FlashCard"> | string
    learnedCount?: IntFilter<"FlashCard"> | number
    lastLearned?: DateTimeNullableFilter<"FlashCard"> | Date | string | null
    image?: StringNullableFilter<"FlashCard"> | string | null
    flashCardSet?: XOR<FlashCardSetScalarRelationFilter, FlashCardSetWhereInput>
  }

  export type FlashCardOrderByWithRelationInput = {
    id?: SortOrder
    frontContent?: SortOrder
    backContent?: SortOrder
    cardIndex?: SortOrder
    flashCardSetID?: SortOrder
    learnedCount?: SortOrder
    lastLearned?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    flashCardSet?: FlashCardSetOrderByWithRelationInput
  }

  export type FlashCardWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FlashCardWhereInput | FlashCardWhereInput[]
    OR?: FlashCardWhereInput[]
    NOT?: FlashCardWhereInput | FlashCardWhereInput[]
    frontContent?: StringFilter<"FlashCard"> | string
    backContent?: StringFilter<"FlashCard"> | string
    cardIndex?: IntFilter<"FlashCard"> | number
    flashCardSetID?: StringFilter<"FlashCard"> | string
    learnedCount?: IntFilter<"FlashCard"> | number
    lastLearned?: DateTimeNullableFilter<"FlashCard"> | Date | string | null
    image?: StringNullableFilter<"FlashCard"> | string | null
    flashCardSet?: XOR<FlashCardSetScalarRelationFilter, FlashCardSetWhereInput>
  }, "id">

  export type FlashCardOrderByWithAggregationInput = {
    id?: SortOrder
    frontContent?: SortOrder
    backContent?: SortOrder
    cardIndex?: SortOrder
    flashCardSetID?: SortOrder
    learnedCount?: SortOrder
    lastLearned?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    _count?: FlashCardCountOrderByAggregateInput
    _avg?: FlashCardAvgOrderByAggregateInput
    _max?: FlashCardMaxOrderByAggregateInput
    _min?: FlashCardMinOrderByAggregateInput
    _sum?: FlashCardSumOrderByAggregateInput
  }

  export type FlashCardScalarWhereWithAggregatesInput = {
    AND?: FlashCardScalarWhereWithAggregatesInput | FlashCardScalarWhereWithAggregatesInput[]
    OR?: FlashCardScalarWhereWithAggregatesInput[]
    NOT?: FlashCardScalarWhereWithAggregatesInput | FlashCardScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FlashCard"> | string
    frontContent?: StringWithAggregatesFilter<"FlashCard"> | string
    backContent?: StringWithAggregatesFilter<"FlashCard"> | string
    cardIndex?: IntWithAggregatesFilter<"FlashCard"> | number
    flashCardSetID?: StringWithAggregatesFilter<"FlashCard"> | string
    learnedCount?: IntWithAggregatesFilter<"FlashCard"> | number
    lastLearned?: DateTimeNullableWithAggregatesFilter<"FlashCard"> | Date | string | null
    image?: StringNullableWithAggregatesFilter<"FlashCard"> | string | null
  }

  export type VideoWhereInput = {
    AND?: VideoWhereInput | VideoWhereInput[]
    OR?: VideoWhereInput[]
    NOT?: VideoWhereInput | VideoWhereInput[]
    id?: StringFilter<"Video"> | string
    flashCardSetID?: StringFilter<"Video"> | string
    dateCreated?: DateTimeFilter<"Video"> | Date | string
    watched?: BoolFilter<"Video"> | boolean
    url?: StringFilter<"Video"> | string
    flashCardSet?: XOR<FlashCardSetScalarRelationFilter, FlashCardSetWhereInput>
  }

  export type VideoOrderByWithRelationInput = {
    id?: SortOrder
    flashCardSetID?: SortOrder
    dateCreated?: SortOrder
    watched?: SortOrder
    url?: SortOrder
    flashCardSet?: FlashCardSetOrderByWithRelationInput
  }

  export type VideoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: VideoWhereInput | VideoWhereInput[]
    OR?: VideoWhereInput[]
    NOT?: VideoWhereInput | VideoWhereInput[]
    flashCardSetID?: StringFilter<"Video"> | string
    dateCreated?: DateTimeFilter<"Video"> | Date | string
    watched?: BoolFilter<"Video"> | boolean
    url?: StringFilter<"Video"> | string
    flashCardSet?: XOR<FlashCardSetScalarRelationFilter, FlashCardSetWhereInput>
  }, "id">

  export type VideoOrderByWithAggregationInput = {
    id?: SortOrder
    flashCardSetID?: SortOrder
    dateCreated?: SortOrder
    watched?: SortOrder
    url?: SortOrder
    _count?: VideoCountOrderByAggregateInput
    _max?: VideoMaxOrderByAggregateInput
    _min?: VideoMinOrderByAggregateInput
  }

  export type VideoScalarWhereWithAggregatesInput = {
    AND?: VideoScalarWhereWithAggregatesInput | VideoScalarWhereWithAggregatesInput[]
    OR?: VideoScalarWhereWithAggregatesInput[]
    NOT?: VideoScalarWhereWithAggregatesInput | VideoScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Video"> | string
    flashCardSetID?: StringWithAggregatesFilter<"Video"> | string
    dateCreated?: DateTimeWithAggregatesFilter<"Video"> | Date | string
    watched?: BoolWithAggregatesFilter<"Video"> | boolean
    url?: StringWithAggregatesFilter<"Video"> | string
  }

  export type PracticeQuestionWhereInput = {
    AND?: PracticeQuestionWhereInput | PracticeQuestionWhereInput[]
    OR?: PracticeQuestionWhereInput[]
    NOT?: PracticeQuestionWhereInput | PracticeQuestionWhereInput[]
    id?: StringFilter<"PracticeQuestion"> | string
    flashCardSetID?: StringFilter<"PracticeQuestion"> | string
    question?: StringFilter<"PracticeQuestion"> | string
    answer?: StringNullableListFilter<"PracticeQuestion">
    options?: JsonNullableFilter<"PracticeQuestion">
    timesAnsweredRight?: IntFilter<"PracticeQuestion"> | number
    timesAnsweredWrong?: IntFilter<"PracticeQuestion"> | number
    image?: StringNullableFilter<"PracticeQuestion"> | string | null
    type?: EnumQuestionTypeFilter<"PracticeQuestion"> | $Enums.QuestionType
    flashCardSet?: XOR<FlashCardSetScalarRelationFilter, FlashCardSetWhereInput>
  }

  export type PracticeQuestionOrderByWithRelationInput = {
    id?: SortOrder
    flashCardSetID?: SortOrder
    question?: SortOrder
    answer?: SortOrder
    options?: SortOrderInput | SortOrder
    timesAnsweredRight?: SortOrder
    timesAnsweredWrong?: SortOrder
    image?: SortOrderInput | SortOrder
    type?: SortOrder
    flashCardSet?: FlashCardSetOrderByWithRelationInput
  }

  export type PracticeQuestionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PracticeQuestionWhereInput | PracticeQuestionWhereInput[]
    OR?: PracticeQuestionWhereInput[]
    NOT?: PracticeQuestionWhereInput | PracticeQuestionWhereInput[]
    flashCardSetID?: StringFilter<"PracticeQuestion"> | string
    question?: StringFilter<"PracticeQuestion"> | string
    answer?: StringNullableListFilter<"PracticeQuestion">
    options?: JsonNullableFilter<"PracticeQuestion">
    timesAnsweredRight?: IntFilter<"PracticeQuestion"> | number
    timesAnsweredWrong?: IntFilter<"PracticeQuestion"> | number
    image?: StringNullableFilter<"PracticeQuestion"> | string | null
    type?: EnumQuestionTypeFilter<"PracticeQuestion"> | $Enums.QuestionType
    flashCardSet?: XOR<FlashCardSetScalarRelationFilter, FlashCardSetWhereInput>
  }, "id">

  export type PracticeQuestionOrderByWithAggregationInput = {
    id?: SortOrder
    flashCardSetID?: SortOrder
    question?: SortOrder
    answer?: SortOrder
    options?: SortOrderInput | SortOrder
    timesAnsweredRight?: SortOrder
    timesAnsweredWrong?: SortOrder
    image?: SortOrderInput | SortOrder
    type?: SortOrder
    _count?: PracticeQuestionCountOrderByAggregateInput
    _avg?: PracticeQuestionAvgOrderByAggregateInput
    _max?: PracticeQuestionMaxOrderByAggregateInput
    _min?: PracticeQuestionMinOrderByAggregateInput
    _sum?: PracticeQuestionSumOrderByAggregateInput
  }

  export type PracticeQuestionScalarWhereWithAggregatesInput = {
    AND?: PracticeQuestionScalarWhereWithAggregatesInput | PracticeQuestionScalarWhereWithAggregatesInput[]
    OR?: PracticeQuestionScalarWhereWithAggregatesInput[]
    NOT?: PracticeQuestionScalarWhereWithAggregatesInput | PracticeQuestionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PracticeQuestion"> | string
    flashCardSetID?: StringWithAggregatesFilter<"PracticeQuestion"> | string
    question?: StringWithAggregatesFilter<"PracticeQuestion"> | string
    answer?: StringNullableListFilter<"PracticeQuestion">
    options?: JsonNullableWithAggregatesFilter<"PracticeQuestion">
    timesAnsweredRight?: IntWithAggregatesFilter<"PracticeQuestion"> | number
    timesAnsweredWrong?: IntWithAggregatesFilter<"PracticeQuestion"> | number
    image?: StringNullableWithAggregatesFilter<"PracticeQuestion"> | string | null
    type?: EnumQuestionTypeWithAggregatesFilter<"PracticeQuestion"> | $Enums.QuestionType
  }

  export type UserCreateInput = {
    id?: string
    email: string
    username: string
    password: string
    dateCreated?: Date | string
    studyguides?: StudyGuideCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    username: string
    password: string
    dateCreated?: Date | string
    studyguides?: StudyGuideUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    studyguides?: StudyGuideUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    studyguides?: StudyGuideUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    username: string
    password: string
    dateCreated?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudyGuideCreateInput = {
    id?: string
    tag?: string | null
    name: string
    dateCreated?: Date | string
    lastModified?: Date | string
    completedBy?: Date | string | null
    completed?: boolean
    user: UserCreateNestedOneWithoutStudyguidesInput
    flashCardSets?: FlashCardSetCreateNestedManyWithoutStudyGuideInput
  }

  export type StudyGuideUncheckedCreateInput = {
    id?: string
    tag?: string | null
    name: string
    dateCreated?: Date | string
    lastModified?: Date | string
    completedBy?: Date | string | null
    completed?: boolean
    userID: string
    flashCardSets?: FlashCardSetUncheckedCreateNestedManyWithoutStudyGuideInput
  }

  export type StudyGuideUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tag?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    lastModified?: DateTimeFieldUpdateOperationsInput | Date | string
    completedBy?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completed?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutStudyguidesNestedInput
    flashCardSets?: FlashCardSetUpdateManyWithoutStudyGuideNestedInput
  }

  export type StudyGuideUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tag?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    lastModified?: DateTimeFieldUpdateOperationsInput | Date | string
    completedBy?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completed?: BoolFieldUpdateOperationsInput | boolean
    userID?: StringFieldUpdateOperationsInput | string
    flashCardSets?: FlashCardSetUncheckedUpdateManyWithoutStudyGuideNestedInput
  }

  export type StudyGuideCreateManyInput = {
    id?: string
    tag?: string | null
    name: string
    dateCreated?: Date | string
    lastModified?: Date | string
    completedBy?: Date | string | null
    completed?: boolean
    userID: string
  }

  export type StudyGuideUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    tag?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    lastModified?: DateTimeFieldUpdateOperationsInput | Date | string
    completedBy?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completed?: BoolFieldUpdateOperationsInput | boolean
  }

  export type StudyGuideUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tag?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    lastModified?: DateTimeFieldUpdateOperationsInput | Date | string
    completedBy?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completed?: BoolFieldUpdateOperationsInput | boolean
    userID?: StringFieldUpdateOperationsInput | string
  }

  export type FlashCardSetCreateInput = {
    id?: string
    name: string
    tag?: string | null
    dateCreated?: Date | string
    lastModified?: Date | string
    studyGuide: StudyGuideCreateNestedOneWithoutFlashCardSetsInput
    flashCards?: FlashCardCreateNestedManyWithoutFlashCardSetInput
    videos?: VideoCreateNestedManyWithoutFlashCardSetInput
    practiceQuestions?: PracticeQuestionCreateNestedManyWithoutFlashCardSetInput
  }

  export type FlashCardSetUncheckedCreateInput = {
    id?: string
    name: string
    tag?: string | null
    dateCreated?: Date | string
    lastModified?: Date | string
    studyGuideID: string
    flashCards?: FlashCardUncheckedCreateNestedManyWithoutFlashCardSetInput
    videos?: VideoUncheckedCreateNestedManyWithoutFlashCardSetInput
    practiceQuestions?: PracticeQuestionUncheckedCreateNestedManyWithoutFlashCardSetInput
  }

  export type FlashCardSetUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    tag?: NullableStringFieldUpdateOperationsInput | string | null
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    lastModified?: DateTimeFieldUpdateOperationsInput | Date | string
    studyGuide?: StudyGuideUpdateOneRequiredWithoutFlashCardSetsNestedInput
    flashCards?: FlashCardUpdateManyWithoutFlashCardSetNestedInput
    videos?: VideoUpdateManyWithoutFlashCardSetNestedInput
    practiceQuestions?: PracticeQuestionUpdateManyWithoutFlashCardSetNestedInput
  }

  export type FlashCardSetUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    tag?: NullableStringFieldUpdateOperationsInput | string | null
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    lastModified?: DateTimeFieldUpdateOperationsInput | Date | string
    studyGuideID?: StringFieldUpdateOperationsInput | string
    flashCards?: FlashCardUncheckedUpdateManyWithoutFlashCardSetNestedInput
    videos?: VideoUncheckedUpdateManyWithoutFlashCardSetNestedInput
    practiceQuestions?: PracticeQuestionUncheckedUpdateManyWithoutFlashCardSetNestedInput
  }

  export type FlashCardSetCreateManyInput = {
    id?: string
    name: string
    tag?: string | null
    dateCreated?: Date | string
    lastModified?: Date | string
    studyGuideID: string
  }

  export type FlashCardSetUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    tag?: NullableStringFieldUpdateOperationsInput | string | null
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    lastModified?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FlashCardSetUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    tag?: NullableStringFieldUpdateOperationsInput | string | null
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    lastModified?: DateTimeFieldUpdateOperationsInput | Date | string
    studyGuideID?: StringFieldUpdateOperationsInput | string
  }

  export type FlashCardCreateInput = {
    id?: string
    frontContent: string
    backContent: string
    cardIndex: number
    learnedCount?: number
    lastLearned?: Date | string | null
    image?: string | null
    flashCardSet: FlashCardSetCreateNestedOneWithoutFlashCardsInput
  }

  export type FlashCardUncheckedCreateInput = {
    id?: string
    frontContent: string
    backContent: string
    cardIndex: number
    flashCardSetID: string
    learnedCount?: number
    lastLearned?: Date | string | null
    image?: string | null
  }

  export type FlashCardUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    frontContent?: StringFieldUpdateOperationsInput | string
    backContent?: StringFieldUpdateOperationsInput | string
    cardIndex?: IntFieldUpdateOperationsInput | number
    learnedCount?: IntFieldUpdateOperationsInput | number
    lastLearned?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    flashCardSet?: FlashCardSetUpdateOneRequiredWithoutFlashCardsNestedInput
  }

  export type FlashCardUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    frontContent?: StringFieldUpdateOperationsInput | string
    backContent?: StringFieldUpdateOperationsInput | string
    cardIndex?: IntFieldUpdateOperationsInput | number
    flashCardSetID?: StringFieldUpdateOperationsInput | string
    learnedCount?: IntFieldUpdateOperationsInput | number
    lastLearned?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FlashCardCreateManyInput = {
    id?: string
    frontContent: string
    backContent: string
    cardIndex: number
    flashCardSetID: string
    learnedCount?: number
    lastLearned?: Date | string | null
    image?: string | null
  }

  export type FlashCardUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    frontContent?: StringFieldUpdateOperationsInput | string
    backContent?: StringFieldUpdateOperationsInput | string
    cardIndex?: IntFieldUpdateOperationsInput | number
    learnedCount?: IntFieldUpdateOperationsInput | number
    lastLearned?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FlashCardUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    frontContent?: StringFieldUpdateOperationsInput | string
    backContent?: StringFieldUpdateOperationsInput | string
    cardIndex?: IntFieldUpdateOperationsInput | number
    flashCardSetID?: StringFieldUpdateOperationsInput | string
    learnedCount?: IntFieldUpdateOperationsInput | number
    lastLearned?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type VideoCreateInput = {
    id?: string
    dateCreated?: Date | string
    watched?: boolean
    url: string
    flashCardSet: FlashCardSetCreateNestedOneWithoutVideosInput
  }

  export type VideoUncheckedCreateInput = {
    id?: string
    flashCardSetID: string
    dateCreated?: Date | string
    watched?: boolean
    url: string
  }

  export type VideoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    watched?: BoolFieldUpdateOperationsInput | boolean
    url?: StringFieldUpdateOperationsInput | string
    flashCardSet?: FlashCardSetUpdateOneRequiredWithoutVideosNestedInput
  }

  export type VideoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    flashCardSetID?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    watched?: BoolFieldUpdateOperationsInput | boolean
    url?: StringFieldUpdateOperationsInput | string
  }

  export type VideoCreateManyInput = {
    id?: string
    flashCardSetID: string
    dateCreated?: Date | string
    watched?: boolean
    url: string
  }

  export type VideoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    watched?: BoolFieldUpdateOperationsInput | boolean
    url?: StringFieldUpdateOperationsInput | string
  }

  export type VideoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    flashCardSetID?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    watched?: BoolFieldUpdateOperationsInput | boolean
    url?: StringFieldUpdateOperationsInput | string
  }

  export type PracticeQuestionCreateInput = {
    id?: string
    question: string
    answer?: PracticeQuestionCreateanswerInput | string[]
    options?: NullableJsonNullValueInput | InputJsonValue
    timesAnsweredRight?: number
    timesAnsweredWrong?: number
    image?: string | null
    type?: $Enums.QuestionType
    flashCardSet: FlashCardSetCreateNestedOneWithoutPracticeQuestionsInput
  }

  export type PracticeQuestionUncheckedCreateInput = {
    id?: string
    flashCardSetID: string
    question: string
    answer?: PracticeQuestionCreateanswerInput | string[]
    options?: NullableJsonNullValueInput | InputJsonValue
    timesAnsweredRight?: number
    timesAnsweredWrong?: number
    image?: string | null
    type?: $Enums.QuestionType
  }

  export type PracticeQuestionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    question?: StringFieldUpdateOperationsInput | string
    answer?: PracticeQuestionUpdateanswerInput | string[]
    options?: NullableJsonNullValueInput | InputJsonValue
    timesAnsweredRight?: IntFieldUpdateOperationsInput | number
    timesAnsweredWrong?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    flashCardSet?: FlashCardSetUpdateOneRequiredWithoutPracticeQuestionsNestedInput
  }

  export type PracticeQuestionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    flashCardSetID?: StringFieldUpdateOperationsInput | string
    question?: StringFieldUpdateOperationsInput | string
    answer?: PracticeQuestionUpdateanswerInput | string[]
    options?: NullableJsonNullValueInput | InputJsonValue
    timesAnsweredRight?: IntFieldUpdateOperationsInput | number
    timesAnsweredWrong?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
  }

  export type PracticeQuestionCreateManyInput = {
    id?: string
    flashCardSetID: string
    question: string
    answer?: PracticeQuestionCreateanswerInput | string[]
    options?: NullableJsonNullValueInput | InputJsonValue
    timesAnsweredRight?: number
    timesAnsweredWrong?: number
    image?: string | null
    type?: $Enums.QuestionType
  }

  export type PracticeQuestionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    question?: StringFieldUpdateOperationsInput | string
    answer?: PracticeQuestionUpdateanswerInput | string[]
    options?: NullableJsonNullValueInput | InputJsonValue
    timesAnsweredRight?: IntFieldUpdateOperationsInput | number
    timesAnsweredWrong?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
  }

  export type PracticeQuestionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    flashCardSetID?: StringFieldUpdateOperationsInput | string
    question?: StringFieldUpdateOperationsInput | string
    answer?: PracticeQuestionUpdateanswerInput | string[]
    options?: NullableJsonNullValueInput | InputJsonValue
    timesAnsweredRight?: IntFieldUpdateOperationsInput | number
    timesAnsweredWrong?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StudyGuideListRelationFilter = {
    every?: StudyGuideWhereInput
    some?: StudyGuideWhereInput
    none?: StudyGuideWhereInput
  }

  export type StudyGuideOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    dateCreated?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    dateCreated?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    dateCreated?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type FlashCardSetListRelationFilter = {
    every?: FlashCardSetWhereInput
    some?: FlashCardSetWhereInput
    none?: FlashCardSetWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type FlashCardSetOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StudyGuideNameUserIDCompoundUniqueInput = {
    name: string
    userID: string
  }

  export type StudyGuideCountOrderByAggregateInput = {
    id?: SortOrder
    tag?: SortOrder
    name?: SortOrder
    dateCreated?: SortOrder
    lastModified?: SortOrder
    completedBy?: SortOrder
    completed?: SortOrder
    userID?: SortOrder
  }

  export type StudyGuideMaxOrderByAggregateInput = {
    id?: SortOrder
    tag?: SortOrder
    name?: SortOrder
    dateCreated?: SortOrder
    lastModified?: SortOrder
    completedBy?: SortOrder
    completed?: SortOrder
    userID?: SortOrder
  }

  export type StudyGuideMinOrderByAggregateInput = {
    id?: SortOrder
    tag?: SortOrder
    name?: SortOrder
    dateCreated?: SortOrder
    lastModified?: SortOrder
    completedBy?: SortOrder
    completed?: SortOrder
    userID?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type StudyGuideScalarRelationFilter = {
    is?: StudyGuideWhereInput
    isNot?: StudyGuideWhereInput
  }

  export type FlashCardListRelationFilter = {
    every?: FlashCardWhereInput
    some?: FlashCardWhereInput
    none?: FlashCardWhereInput
  }

  export type VideoListRelationFilter = {
    every?: VideoWhereInput
    some?: VideoWhereInput
    none?: VideoWhereInput
  }

  export type PracticeQuestionListRelationFilter = {
    every?: PracticeQuestionWhereInput
    some?: PracticeQuestionWhereInput
    none?: PracticeQuestionWhereInput
  }

  export type FlashCardOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VideoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PracticeQuestionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FlashCardSetNameStudyGuideIDCompoundUniqueInput = {
    name: string
    studyGuideID: string
  }

  export type FlashCardSetCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    tag?: SortOrder
    dateCreated?: SortOrder
    lastModified?: SortOrder
    studyGuideID?: SortOrder
  }

  export type FlashCardSetMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    tag?: SortOrder
    dateCreated?: SortOrder
    lastModified?: SortOrder
    studyGuideID?: SortOrder
  }

  export type FlashCardSetMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    tag?: SortOrder
    dateCreated?: SortOrder
    lastModified?: SortOrder
    studyGuideID?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type FlashCardSetScalarRelationFilter = {
    is?: FlashCardSetWhereInput
    isNot?: FlashCardSetWhereInput
  }

  export type FlashCardCountOrderByAggregateInput = {
    id?: SortOrder
    frontContent?: SortOrder
    backContent?: SortOrder
    cardIndex?: SortOrder
    flashCardSetID?: SortOrder
    learnedCount?: SortOrder
    lastLearned?: SortOrder
    image?: SortOrder
  }

  export type FlashCardAvgOrderByAggregateInput = {
    cardIndex?: SortOrder
    learnedCount?: SortOrder
  }

  export type FlashCardMaxOrderByAggregateInput = {
    id?: SortOrder
    frontContent?: SortOrder
    backContent?: SortOrder
    cardIndex?: SortOrder
    flashCardSetID?: SortOrder
    learnedCount?: SortOrder
    lastLearned?: SortOrder
    image?: SortOrder
  }

  export type FlashCardMinOrderByAggregateInput = {
    id?: SortOrder
    frontContent?: SortOrder
    backContent?: SortOrder
    cardIndex?: SortOrder
    flashCardSetID?: SortOrder
    learnedCount?: SortOrder
    lastLearned?: SortOrder
    image?: SortOrder
  }

  export type FlashCardSumOrderByAggregateInput = {
    cardIndex?: SortOrder
    learnedCount?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type VideoCountOrderByAggregateInput = {
    id?: SortOrder
    flashCardSetID?: SortOrder
    dateCreated?: SortOrder
    watched?: SortOrder
    url?: SortOrder
  }

  export type VideoMaxOrderByAggregateInput = {
    id?: SortOrder
    flashCardSetID?: SortOrder
    dateCreated?: SortOrder
    watched?: SortOrder
    url?: SortOrder
  }

  export type VideoMinOrderByAggregateInput = {
    id?: SortOrder
    flashCardSetID?: SortOrder
    dateCreated?: SortOrder
    watched?: SortOrder
    url?: SortOrder
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type EnumQuestionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.QuestionType | EnumQuestionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.QuestionType[] | ListEnumQuestionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.QuestionType[] | ListEnumQuestionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumQuestionTypeFilter<$PrismaModel> | $Enums.QuestionType
  }

  export type PracticeQuestionCountOrderByAggregateInput = {
    id?: SortOrder
    flashCardSetID?: SortOrder
    question?: SortOrder
    answer?: SortOrder
    options?: SortOrder
    timesAnsweredRight?: SortOrder
    timesAnsweredWrong?: SortOrder
    image?: SortOrder
    type?: SortOrder
  }

  export type PracticeQuestionAvgOrderByAggregateInput = {
    timesAnsweredRight?: SortOrder
    timesAnsweredWrong?: SortOrder
  }

  export type PracticeQuestionMaxOrderByAggregateInput = {
    id?: SortOrder
    flashCardSetID?: SortOrder
    question?: SortOrder
    timesAnsweredRight?: SortOrder
    timesAnsweredWrong?: SortOrder
    image?: SortOrder
    type?: SortOrder
  }

  export type PracticeQuestionMinOrderByAggregateInput = {
    id?: SortOrder
    flashCardSetID?: SortOrder
    question?: SortOrder
    timesAnsweredRight?: SortOrder
    timesAnsweredWrong?: SortOrder
    image?: SortOrder
    type?: SortOrder
  }

  export type PracticeQuestionSumOrderByAggregateInput = {
    timesAnsweredRight?: SortOrder
    timesAnsweredWrong?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type EnumQuestionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.QuestionType | EnumQuestionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.QuestionType[] | ListEnumQuestionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.QuestionType[] | ListEnumQuestionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumQuestionTypeWithAggregatesFilter<$PrismaModel> | $Enums.QuestionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumQuestionTypeFilter<$PrismaModel>
    _max?: NestedEnumQuestionTypeFilter<$PrismaModel>
  }

  export type StudyGuideCreateNestedManyWithoutUserInput = {
    create?: XOR<StudyGuideCreateWithoutUserInput, StudyGuideUncheckedCreateWithoutUserInput> | StudyGuideCreateWithoutUserInput[] | StudyGuideUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StudyGuideCreateOrConnectWithoutUserInput | StudyGuideCreateOrConnectWithoutUserInput[]
    createMany?: StudyGuideCreateManyUserInputEnvelope
    connect?: StudyGuideWhereUniqueInput | StudyGuideWhereUniqueInput[]
  }

  export type StudyGuideUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<StudyGuideCreateWithoutUserInput, StudyGuideUncheckedCreateWithoutUserInput> | StudyGuideCreateWithoutUserInput[] | StudyGuideUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StudyGuideCreateOrConnectWithoutUserInput | StudyGuideCreateOrConnectWithoutUserInput[]
    createMany?: StudyGuideCreateManyUserInputEnvelope
    connect?: StudyGuideWhereUniqueInput | StudyGuideWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type StudyGuideUpdateManyWithoutUserNestedInput = {
    create?: XOR<StudyGuideCreateWithoutUserInput, StudyGuideUncheckedCreateWithoutUserInput> | StudyGuideCreateWithoutUserInput[] | StudyGuideUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StudyGuideCreateOrConnectWithoutUserInput | StudyGuideCreateOrConnectWithoutUserInput[]
    upsert?: StudyGuideUpsertWithWhereUniqueWithoutUserInput | StudyGuideUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: StudyGuideCreateManyUserInputEnvelope
    set?: StudyGuideWhereUniqueInput | StudyGuideWhereUniqueInput[]
    disconnect?: StudyGuideWhereUniqueInput | StudyGuideWhereUniqueInput[]
    delete?: StudyGuideWhereUniqueInput | StudyGuideWhereUniqueInput[]
    connect?: StudyGuideWhereUniqueInput | StudyGuideWhereUniqueInput[]
    update?: StudyGuideUpdateWithWhereUniqueWithoutUserInput | StudyGuideUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: StudyGuideUpdateManyWithWhereWithoutUserInput | StudyGuideUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: StudyGuideScalarWhereInput | StudyGuideScalarWhereInput[]
  }

  export type StudyGuideUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<StudyGuideCreateWithoutUserInput, StudyGuideUncheckedCreateWithoutUserInput> | StudyGuideCreateWithoutUserInput[] | StudyGuideUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StudyGuideCreateOrConnectWithoutUserInput | StudyGuideCreateOrConnectWithoutUserInput[]
    upsert?: StudyGuideUpsertWithWhereUniqueWithoutUserInput | StudyGuideUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: StudyGuideCreateManyUserInputEnvelope
    set?: StudyGuideWhereUniqueInput | StudyGuideWhereUniqueInput[]
    disconnect?: StudyGuideWhereUniqueInput | StudyGuideWhereUniqueInput[]
    delete?: StudyGuideWhereUniqueInput | StudyGuideWhereUniqueInput[]
    connect?: StudyGuideWhereUniqueInput | StudyGuideWhereUniqueInput[]
    update?: StudyGuideUpdateWithWhereUniqueWithoutUserInput | StudyGuideUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: StudyGuideUpdateManyWithWhereWithoutUserInput | StudyGuideUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: StudyGuideScalarWhereInput | StudyGuideScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutStudyguidesInput = {
    create?: XOR<UserCreateWithoutStudyguidesInput, UserUncheckedCreateWithoutStudyguidesInput>
    connectOrCreate?: UserCreateOrConnectWithoutStudyguidesInput
    connect?: UserWhereUniqueInput
  }

  export type FlashCardSetCreateNestedManyWithoutStudyGuideInput = {
    create?: XOR<FlashCardSetCreateWithoutStudyGuideInput, FlashCardSetUncheckedCreateWithoutStudyGuideInput> | FlashCardSetCreateWithoutStudyGuideInput[] | FlashCardSetUncheckedCreateWithoutStudyGuideInput[]
    connectOrCreate?: FlashCardSetCreateOrConnectWithoutStudyGuideInput | FlashCardSetCreateOrConnectWithoutStudyGuideInput[]
    createMany?: FlashCardSetCreateManyStudyGuideInputEnvelope
    connect?: FlashCardSetWhereUniqueInput | FlashCardSetWhereUniqueInput[]
  }

  export type FlashCardSetUncheckedCreateNestedManyWithoutStudyGuideInput = {
    create?: XOR<FlashCardSetCreateWithoutStudyGuideInput, FlashCardSetUncheckedCreateWithoutStudyGuideInput> | FlashCardSetCreateWithoutStudyGuideInput[] | FlashCardSetUncheckedCreateWithoutStudyGuideInput[]
    connectOrCreate?: FlashCardSetCreateOrConnectWithoutStudyGuideInput | FlashCardSetCreateOrConnectWithoutStudyGuideInput[]
    createMany?: FlashCardSetCreateManyStudyGuideInputEnvelope
    connect?: FlashCardSetWhereUniqueInput | FlashCardSetWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneRequiredWithoutStudyguidesNestedInput = {
    create?: XOR<UserCreateWithoutStudyguidesInput, UserUncheckedCreateWithoutStudyguidesInput>
    connectOrCreate?: UserCreateOrConnectWithoutStudyguidesInput
    upsert?: UserUpsertWithoutStudyguidesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutStudyguidesInput, UserUpdateWithoutStudyguidesInput>, UserUncheckedUpdateWithoutStudyguidesInput>
  }

  export type FlashCardSetUpdateManyWithoutStudyGuideNestedInput = {
    create?: XOR<FlashCardSetCreateWithoutStudyGuideInput, FlashCardSetUncheckedCreateWithoutStudyGuideInput> | FlashCardSetCreateWithoutStudyGuideInput[] | FlashCardSetUncheckedCreateWithoutStudyGuideInput[]
    connectOrCreate?: FlashCardSetCreateOrConnectWithoutStudyGuideInput | FlashCardSetCreateOrConnectWithoutStudyGuideInput[]
    upsert?: FlashCardSetUpsertWithWhereUniqueWithoutStudyGuideInput | FlashCardSetUpsertWithWhereUniqueWithoutStudyGuideInput[]
    createMany?: FlashCardSetCreateManyStudyGuideInputEnvelope
    set?: FlashCardSetWhereUniqueInput | FlashCardSetWhereUniqueInput[]
    disconnect?: FlashCardSetWhereUniqueInput | FlashCardSetWhereUniqueInput[]
    delete?: FlashCardSetWhereUniqueInput | FlashCardSetWhereUniqueInput[]
    connect?: FlashCardSetWhereUniqueInput | FlashCardSetWhereUniqueInput[]
    update?: FlashCardSetUpdateWithWhereUniqueWithoutStudyGuideInput | FlashCardSetUpdateWithWhereUniqueWithoutStudyGuideInput[]
    updateMany?: FlashCardSetUpdateManyWithWhereWithoutStudyGuideInput | FlashCardSetUpdateManyWithWhereWithoutStudyGuideInput[]
    deleteMany?: FlashCardSetScalarWhereInput | FlashCardSetScalarWhereInput[]
  }

  export type FlashCardSetUncheckedUpdateManyWithoutStudyGuideNestedInput = {
    create?: XOR<FlashCardSetCreateWithoutStudyGuideInput, FlashCardSetUncheckedCreateWithoutStudyGuideInput> | FlashCardSetCreateWithoutStudyGuideInput[] | FlashCardSetUncheckedCreateWithoutStudyGuideInput[]
    connectOrCreate?: FlashCardSetCreateOrConnectWithoutStudyGuideInput | FlashCardSetCreateOrConnectWithoutStudyGuideInput[]
    upsert?: FlashCardSetUpsertWithWhereUniqueWithoutStudyGuideInput | FlashCardSetUpsertWithWhereUniqueWithoutStudyGuideInput[]
    createMany?: FlashCardSetCreateManyStudyGuideInputEnvelope
    set?: FlashCardSetWhereUniqueInput | FlashCardSetWhereUniqueInput[]
    disconnect?: FlashCardSetWhereUniqueInput | FlashCardSetWhereUniqueInput[]
    delete?: FlashCardSetWhereUniqueInput | FlashCardSetWhereUniqueInput[]
    connect?: FlashCardSetWhereUniqueInput | FlashCardSetWhereUniqueInput[]
    update?: FlashCardSetUpdateWithWhereUniqueWithoutStudyGuideInput | FlashCardSetUpdateWithWhereUniqueWithoutStudyGuideInput[]
    updateMany?: FlashCardSetUpdateManyWithWhereWithoutStudyGuideInput | FlashCardSetUpdateManyWithWhereWithoutStudyGuideInput[]
    deleteMany?: FlashCardSetScalarWhereInput | FlashCardSetScalarWhereInput[]
  }

  export type StudyGuideCreateNestedOneWithoutFlashCardSetsInput = {
    create?: XOR<StudyGuideCreateWithoutFlashCardSetsInput, StudyGuideUncheckedCreateWithoutFlashCardSetsInput>
    connectOrCreate?: StudyGuideCreateOrConnectWithoutFlashCardSetsInput
    connect?: StudyGuideWhereUniqueInput
  }

  export type FlashCardCreateNestedManyWithoutFlashCardSetInput = {
    create?: XOR<FlashCardCreateWithoutFlashCardSetInput, FlashCardUncheckedCreateWithoutFlashCardSetInput> | FlashCardCreateWithoutFlashCardSetInput[] | FlashCardUncheckedCreateWithoutFlashCardSetInput[]
    connectOrCreate?: FlashCardCreateOrConnectWithoutFlashCardSetInput | FlashCardCreateOrConnectWithoutFlashCardSetInput[]
    createMany?: FlashCardCreateManyFlashCardSetInputEnvelope
    connect?: FlashCardWhereUniqueInput | FlashCardWhereUniqueInput[]
  }

  export type VideoCreateNestedManyWithoutFlashCardSetInput = {
    create?: XOR<VideoCreateWithoutFlashCardSetInput, VideoUncheckedCreateWithoutFlashCardSetInput> | VideoCreateWithoutFlashCardSetInput[] | VideoUncheckedCreateWithoutFlashCardSetInput[]
    connectOrCreate?: VideoCreateOrConnectWithoutFlashCardSetInput | VideoCreateOrConnectWithoutFlashCardSetInput[]
    createMany?: VideoCreateManyFlashCardSetInputEnvelope
    connect?: VideoWhereUniqueInput | VideoWhereUniqueInput[]
  }

  export type PracticeQuestionCreateNestedManyWithoutFlashCardSetInput = {
    create?: XOR<PracticeQuestionCreateWithoutFlashCardSetInput, PracticeQuestionUncheckedCreateWithoutFlashCardSetInput> | PracticeQuestionCreateWithoutFlashCardSetInput[] | PracticeQuestionUncheckedCreateWithoutFlashCardSetInput[]
    connectOrCreate?: PracticeQuestionCreateOrConnectWithoutFlashCardSetInput | PracticeQuestionCreateOrConnectWithoutFlashCardSetInput[]
    createMany?: PracticeQuestionCreateManyFlashCardSetInputEnvelope
    connect?: PracticeQuestionWhereUniqueInput | PracticeQuestionWhereUniqueInput[]
  }

  export type FlashCardUncheckedCreateNestedManyWithoutFlashCardSetInput = {
    create?: XOR<FlashCardCreateWithoutFlashCardSetInput, FlashCardUncheckedCreateWithoutFlashCardSetInput> | FlashCardCreateWithoutFlashCardSetInput[] | FlashCardUncheckedCreateWithoutFlashCardSetInput[]
    connectOrCreate?: FlashCardCreateOrConnectWithoutFlashCardSetInput | FlashCardCreateOrConnectWithoutFlashCardSetInput[]
    createMany?: FlashCardCreateManyFlashCardSetInputEnvelope
    connect?: FlashCardWhereUniqueInput | FlashCardWhereUniqueInput[]
  }

  export type VideoUncheckedCreateNestedManyWithoutFlashCardSetInput = {
    create?: XOR<VideoCreateWithoutFlashCardSetInput, VideoUncheckedCreateWithoutFlashCardSetInput> | VideoCreateWithoutFlashCardSetInput[] | VideoUncheckedCreateWithoutFlashCardSetInput[]
    connectOrCreate?: VideoCreateOrConnectWithoutFlashCardSetInput | VideoCreateOrConnectWithoutFlashCardSetInput[]
    createMany?: VideoCreateManyFlashCardSetInputEnvelope
    connect?: VideoWhereUniqueInput | VideoWhereUniqueInput[]
  }

  export type PracticeQuestionUncheckedCreateNestedManyWithoutFlashCardSetInput = {
    create?: XOR<PracticeQuestionCreateWithoutFlashCardSetInput, PracticeQuestionUncheckedCreateWithoutFlashCardSetInput> | PracticeQuestionCreateWithoutFlashCardSetInput[] | PracticeQuestionUncheckedCreateWithoutFlashCardSetInput[]
    connectOrCreate?: PracticeQuestionCreateOrConnectWithoutFlashCardSetInput | PracticeQuestionCreateOrConnectWithoutFlashCardSetInput[]
    createMany?: PracticeQuestionCreateManyFlashCardSetInputEnvelope
    connect?: PracticeQuestionWhereUniqueInput | PracticeQuestionWhereUniqueInput[]
  }

  export type StudyGuideUpdateOneRequiredWithoutFlashCardSetsNestedInput = {
    create?: XOR<StudyGuideCreateWithoutFlashCardSetsInput, StudyGuideUncheckedCreateWithoutFlashCardSetsInput>
    connectOrCreate?: StudyGuideCreateOrConnectWithoutFlashCardSetsInput
    upsert?: StudyGuideUpsertWithoutFlashCardSetsInput
    connect?: StudyGuideWhereUniqueInput
    update?: XOR<XOR<StudyGuideUpdateToOneWithWhereWithoutFlashCardSetsInput, StudyGuideUpdateWithoutFlashCardSetsInput>, StudyGuideUncheckedUpdateWithoutFlashCardSetsInput>
  }

  export type FlashCardUpdateManyWithoutFlashCardSetNestedInput = {
    create?: XOR<FlashCardCreateWithoutFlashCardSetInput, FlashCardUncheckedCreateWithoutFlashCardSetInput> | FlashCardCreateWithoutFlashCardSetInput[] | FlashCardUncheckedCreateWithoutFlashCardSetInput[]
    connectOrCreate?: FlashCardCreateOrConnectWithoutFlashCardSetInput | FlashCardCreateOrConnectWithoutFlashCardSetInput[]
    upsert?: FlashCardUpsertWithWhereUniqueWithoutFlashCardSetInput | FlashCardUpsertWithWhereUniqueWithoutFlashCardSetInput[]
    createMany?: FlashCardCreateManyFlashCardSetInputEnvelope
    set?: FlashCardWhereUniqueInput | FlashCardWhereUniqueInput[]
    disconnect?: FlashCardWhereUniqueInput | FlashCardWhereUniqueInput[]
    delete?: FlashCardWhereUniqueInput | FlashCardWhereUniqueInput[]
    connect?: FlashCardWhereUniqueInput | FlashCardWhereUniqueInput[]
    update?: FlashCardUpdateWithWhereUniqueWithoutFlashCardSetInput | FlashCardUpdateWithWhereUniqueWithoutFlashCardSetInput[]
    updateMany?: FlashCardUpdateManyWithWhereWithoutFlashCardSetInput | FlashCardUpdateManyWithWhereWithoutFlashCardSetInput[]
    deleteMany?: FlashCardScalarWhereInput | FlashCardScalarWhereInput[]
  }

  export type VideoUpdateManyWithoutFlashCardSetNestedInput = {
    create?: XOR<VideoCreateWithoutFlashCardSetInput, VideoUncheckedCreateWithoutFlashCardSetInput> | VideoCreateWithoutFlashCardSetInput[] | VideoUncheckedCreateWithoutFlashCardSetInput[]
    connectOrCreate?: VideoCreateOrConnectWithoutFlashCardSetInput | VideoCreateOrConnectWithoutFlashCardSetInput[]
    upsert?: VideoUpsertWithWhereUniqueWithoutFlashCardSetInput | VideoUpsertWithWhereUniqueWithoutFlashCardSetInput[]
    createMany?: VideoCreateManyFlashCardSetInputEnvelope
    set?: VideoWhereUniqueInput | VideoWhereUniqueInput[]
    disconnect?: VideoWhereUniqueInput | VideoWhereUniqueInput[]
    delete?: VideoWhereUniqueInput | VideoWhereUniqueInput[]
    connect?: VideoWhereUniqueInput | VideoWhereUniqueInput[]
    update?: VideoUpdateWithWhereUniqueWithoutFlashCardSetInput | VideoUpdateWithWhereUniqueWithoutFlashCardSetInput[]
    updateMany?: VideoUpdateManyWithWhereWithoutFlashCardSetInput | VideoUpdateManyWithWhereWithoutFlashCardSetInput[]
    deleteMany?: VideoScalarWhereInput | VideoScalarWhereInput[]
  }

  export type PracticeQuestionUpdateManyWithoutFlashCardSetNestedInput = {
    create?: XOR<PracticeQuestionCreateWithoutFlashCardSetInput, PracticeQuestionUncheckedCreateWithoutFlashCardSetInput> | PracticeQuestionCreateWithoutFlashCardSetInput[] | PracticeQuestionUncheckedCreateWithoutFlashCardSetInput[]
    connectOrCreate?: PracticeQuestionCreateOrConnectWithoutFlashCardSetInput | PracticeQuestionCreateOrConnectWithoutFlashCardSetInput[]
    upsert?: PracticeQuestionUpsertWithWhereUniqueWithoutFlashCardSetInput | PracticeQuestionUpsertWithWhereUniqueWithoutFlashCardSetInput[]
    createMany?: PracticeQuestionCreateManyFlashCardSetInputEnvelope
    set?: PracticeQuestionWhereUniqueInput | PracticeQuestionWhereUniqueInput[]
    disconnect?: PracticeQuestionWhereUniqueInput | PracticeQuestionWhereUniqueInput[]
    delete?: PracticeQuestionWhereUniqueInput | PracticeQuestionWhereUniqueInput[]
    connect?: PracticeQuestionWhereUniqueInput | PracticeQuestionWhereUniqueInput[]
    update?: PracticeQuestionUpdateWithWhereUniqueWithoutFlashCardSetInput | PracticeQuestionUpdateWithWhereUniqueWithoutFlashCardSetInput[]
    updateMany?: PracticeQuestionUpdateManyWithWhereWithoutFlashCardSetInput | PracticeQuestionUpdateManyWithWhereWithoutFlashCardSetInput[]
    deleteMany?: PracticeQuestionScalarWhereInput | PracticeQuestionScalarWhereInput[]
  }

  export type FlashCardUncheckedUpdateManyWithoutFlashCardSetNestedInput = {
    create?: XOR<FlashCardCreateWithoutFlashCardSetInput, FlashCardUncheckedCreateWithoutFlashCardSetInput> | FlashCardCreateWithoutFlashCardSetInput[] | FlashCardUncheckedCreateWithoutFlashCardSetInput[]
    connectOrCreate?: FlashCardCreateOrConnectWithoutFlashCardSetInput | FlashCardCreateOrConnectWithoutFlashCardSetInput[]
    upsert?: FlashCardUpsertWithWhereUniqueWithoutFlashCardSetInput | FlashCardUpsertWithWhereUniqueWithoutFlashCardSetInput[]
    createMany?: FlashCardCreateManyFlashCardSetInputEnvelope
    set?: FlashCardWhereUniqueInput | FlashCardWhereUniqueInput[]
    disconnect?: FlashCardWhereUniqueInput | FlashCardWhereUniqueInput[]
    delete?: FlashCardWhereUniqueInput | FlashCardWhereUniqueInput[]
    connect?: FlashCardWhereUniqueInput | FlashCardWhereUniqueInput[]
    update?: FlashCardUpdateWithWhereUniqueWithoutFlashCardSetInput | FlashCardUpdateWithWhereUniqueWithoutFlashCardSetInput[]
    updateMany?: FlashCardUpdateManyWithWhereWithoutFlashCardSetInput | FlashCardUpdateManyWithWhereWithoutFlashCardSetInput[]
    deleteMany?: FlashCardScalarWhereInput | FlashCardScalarWhereInput[]
  }

  export type VideoUncheckedUpdateManyWithoutFlashCardSetNestedInput = {
    create?: XOR<VideoCreateWithoutFlashCardSetInput, VideoUncheckedCreateWithoutFlashCardSetInput> | VideoCreateWithoutFlashCardSetInput[] | VideoUncheckedCreateWithoutFlashCardSetInput[]
    connectOrCreate?: VideoCreateOrConnectWithoutFlashCardSetInput | VideoCreateOrConnectWithoutFlashCardSetInput[]
    upsert?: VideoUpsertWithWhereUniqueWithoutFlashCardSetInput | VideoUpsertWithWhereUniqueWithoutFlashCardSetInput[]
    createMany?: VideoCreateManyFlashCardSetInputEnvelope
    set?: VideoWhereUniqueInput | VideoWhereUniqueInput[]
    disconnect?: VideoWhereUniqueInput | VideoWhereUniqueInput[]
    delete?: VideoWhereUniqueInput | VideoWhereUniqueInput[]
    connect?: VideoWhereUniqueInput | VideoWhereUniqueInput[]
    update?: VideoUpdateWithWhereUniqueWithoutFlashCardSetInput | VideoUpdateWithWhereUniqueWithoutFlashCardSetInput[]
    updateMany?: VideoUpdateManyWithWhereWithoutFlashCardSetInput | VideoUpdateManyWithWhereWithoutFlashCardSetInput[]
    deleteMany?: VideoScalarWhereInput | VideoScalarWhereInput[]
  }

  export type PracticeQuestionUncheckedUpdateManyWithoutFlashCardSetNestedInput = {
    create?: XOR<PracticeQuestionCreateWithoutFlashCardSetInput, PracticeQuestionUncheckedCreateWithoutFlashCardSetInput> | PracticeQuestionCreateWithoutFlashCardSetInput[] | PracticeQuestionUncheckedCreateWithoutFlashCardSetInput[]
    connectOrCreate?: PracticeQuestionCreateOrConnectWithoutFlashCardSetInput | PracticeQuestionCreateOrConnectWithoutFlashCardSetInput[]
    upsert?: PracticeQuestionUpsertWithWhereUniqueWithoutFlashCardSetInput | PracticeQuestionUpsertWithWhereUniqueWithoutFlashCardSetInput[]
    createMany?: PracticeQuestionCreateManyFlashCardSetInputEnvelope
    set?: PracticeQuestionWhereUniqueInput | PracticeQuestionWhereUniqueInput[]
    disconnect?: PracticeQuestionWhereUniqueInput | PracticeQuestionWhereUniqueInput[]
    delete?: PracticeQuestionWhereUniqueInput | PracticeQuestionWhereUniqueInput[]
    connect?: PracticeQuestionWhereUniqueInput | PracticeQuestionWhereUniqueInput[]
    update?: PracticeQuestionUpdateWithWhereUniqueWithoutFlashCardSetInput | PracticeQuestionUpdateWithWhereUniqueWithoutFlashCardSetInput[]
    updateMany?: PracticeQuestionUpdateManyWithWhereWithoutFlashCardSetInput | PracticeQuestionUpdateManyWithWhereWithoutFlashCardSetInput[]
    deleteMany?: PracticeQuestionScalarWhereInput | PracticeQuestionScalarWhereInput[]
  }

  export type FlashCardSetCreateNestedOneWithoutFlashCardsInput = {
    create?: XOR<FlashCardSetCreateWithoutFlashCardsInput, FlashCardSetUncheckedCreateWithoutFlashCardsInput>
    connectOrCreate?: FlashCardSetCreateOrConnectWithoutFlashCardsInput
    connect?: FlashCardSetWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FlashCardSetUpdateOneRequiredWithoutFlashCardsNestedInput = {
    create?: XOR<FlashCardSetCreateWithoutFlashCardsInput, FlashCardSetUncheckedCreateWithoutFlashCardsInput>
    connectOrCreate?: FlashCardSetCreateOrConnectWithoutFlashCardsInput
    upsert?: FlashCardSetUpsertWithoutFlashCardsInput
    connect?: FlashCardSetWhereUniqueInput
    update?: XOR<XOR<FlashCardSetUpdateToOneWithWhereWithoutFlashCardsInput, FlashCardSetUpdateWithoutFlashCardsInput>, FlashCardSetUncheckedUpdateWithoutFlashCardsInput>
  }

  export type FlashCardSetCreateNestedOneWithoutVideosInput = {
    create?: XOR<FlashCardSetCreateWithoutVideosInput, FlashCardSetUncheckedCreateWithoutVideosInput>
    connectOrCreate?: FlashCardSetCreateOrConnectWithoutVideosInput
    connect?: FlashCardSetWhereUniqueInput
  }

  export type FlashCardSetUpdateOneRequiredWithoutVideosNestedInput = {
    create?: XOR<FlashCardSetCreateWithoutVideosInput, FlashCardSetUncheckedCreateWithoutVideosInput>
    connectOrCreate?: FlashCardSetCreateOrConnectWithoutVideosInput
    upsert?: FlashCardSetUpsertWithoutVideosInput
    connect?: FlashCardSetWhereUniqueInput
    update?: XOR<XOR<FlashCardSetUpdateToOneWithWhereWithoutVideosInput, FlashCardSetUpdateWithoutVideosInput>, FlashCardSetUncheckedUpdateWithoutVideosInput>
  }

  export type PracticeQuestionCreateanswerInput = {
    set: string[]
  }

  export type FlashCardSetCreateNestedOneWithoutPracticeQuestionsInput = {
    create?: XOR<FlashCardSetCreateWithoutPracticeQuestionsInput, FlashCardSetUncheckedCreateWithoutPracticeQuestionsInput>
    connectOrCreate?: FlashCardSetCreateOrConnectWithoutPracticeQuestionsInput
    connect?: FlashCardSetWhereUniqueInput
  }

  export type PracticeQuestionUpdateanswerInput = {
    set?: string[]
    push?: string | string[]
  }

  export type EnumQuestionTypeFieldUpdateOperationsInput = {
    set?: $Enums.QuestionType
  }

  export type FlashCardSetUpdateOneRequiredWithoutPracticeQuestionsNestedInput = {
    create?: XOR<FlashCardSetCreateWithoutPracticeQuestionsInput, FlashCardSetUncheckedCreateWithoutPracticeQuestionsInput>
    connectOrCreate?: FlashCardSetCreateOrConnectWithoutPracticeQuestionsInput
    upsert?: FlashCardSetUpsertWithoutPracticeQuestionsInput
    connect?: FlashCardSetWhereUniqueInput
    update?: XOR<XOR<FlashCardSetUpdateToOneWithWhereWithoutPracticeQuestionsInput, FlashCardSetUpdateWithoutPracticeQuestionsInput>, FlashCardSetUncheckedUpdateWithoutPracticeQuestionsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumQuestionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.QuestionType | EnumQuestionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.QuestionType[] | ListEnumQuestionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.QuestionType[] | ListEnumQuestionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumQuestionTypeFilter<$PrismaModel> | $Enums.QuestionType
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumQuestionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.QuestionType | EnumQuestionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.QuestionType[] | ListEnumQuestionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.QuestionType[] | ListEnumQuestionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumQuestionTypeWithAggregatesFilter<$PrismaModel> | $Enums.QuestionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumQuestionTypeFilter<$PrismaModel>
    _max?: NestedEnumQuestionTypeFilter<$PrismaModel>
  }

  export type StudyGuideCreateWithoutUserInput = {
    id?: string
    tag?: string | null
    name: string
    dateCreated?: Date | string
    lastModified?: Date | string
    completedBy?: Date | string | null
    completed?: boolean
    flashCardSets?: FlashCardSetCreateNestedManyWithoutStudyGuideInput
  }

  export type StudyGuideUncheckedCreateWithoutUserInput = {
    id?: string
    tag?: string | null
    name: string
    dateCreated?: Date | string
    lastModified?: Date | string
    completedBy?: Date | string | null
    completed?: boolean
    flashCardSets?: FlashCardSetUncheckedCreateNestedManyWithoutStudyGuideInput
  }

  export type StudyGuideCreateOrConnectWithoutUserInput = {
    where: StudyGuideWhereUniqueInput
    create: XOR<StudyGuideCreateWithoutUserInput, StudyGuideUncheckedCreateWithoutUserInput>
  }

  export type StudyGuideCreateManyUserInputEnvelope = {
    data: StudyGuideCreateManyUserInput | StudyGuideCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type StudyGuideUpsertWithWhereUniqueWithoutUserInput = {
    where: StudyGuideWhereUniqueInput
    update: XOR<StudyGuideUpdateWithoutUserInput, StudyGuideUncheckedUpdateWithoutUserInput>
    create: XOR<StudyGuideCreateWithoutUserInput, StudyGuideUncheckedCreateWithoutUserInput>
  }

  export type StudyGuideUpdateWithWhereUniqueWithoutUserInput = {
    where: StudyGuideWhereUniqueInput
    data: XOR<StudyGuideUpdateWithoutUserInput, StudyGuideUncheckedUpdateWithoutUserInput>
  }

  export type StudyGuideUpdateManyWithWhereWithoutUserInput = {
    where: StudyGuideScalarWhereInput
    data: XOR<StudyGuideUpdateManyMutationInput, StudyGuideUncheckedUpdateManyWithoutUserInput>
  }

  export type StudyGuideScalarWhereInput = {
    AND?: StudyGuideScalarWhereInput | StudyGuideScalarWhereInput[]
    OR?: StudyGuideScalarWhereInput[]
    NOT?: StudyGuideScalarWhereInput | StudyGuideScalarWhereInput[]
    id?: StringFilter<"StudyGuide"> | string
    tag?: StringNullableFilter<"StudyGuide"> | string | null
    name?: StringFilter<"StudyGuide"> | string
    dateCreated?: DateTimeFilter<"StudyGuide"> | Date | string
    lastModified?: DateTimeFilter<"StudyGuide"> | Date | string
    completedBy?: DateTimeNullableFilter<"StudyGuide"> | Date | string | null
    completed?: BoolFilter<"StudyGuide"> | boolean
    userID?: StringFilter<"StudyGuide"> | string
  }

  export type UserCreateWithoutStudyguidesInput = {
    id?: string
    email: string
    username: string
    password: string
    dateCreated?: Date | string
  }

  export type UserUncheckedCreateWithoutStudyguidesInput = {
    id?: string
    email: string
    username: string
    password: string
    dateCreated?: Date | string
  }

  export type UserCreateOrConnectWithoutStudyguidesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStudyguidesInput, UserUncheckedCreateWithoutStudyguidesInput>
  }

  export type FlashCardSetCreateWithoutStudyGuideInput = {
    id?: string
    name: string
    tag?: string | null
    dateCreated?: Date | string
    lastModified?: Date | string
    flashCards?: FlashCardCreateNestedManyWithoutFlashCardSetInput
    videos?: VideoCreateNestedManyWithoutFlashCardSetInput
    practiceQuestions?: PracticeQuestionCreateNestedManyWithoutFlashCardSetInput
  }

  export type FlashCardSetUncheckedCreateWithoutStudyGuideInput = {
    id?: string
    name: string
    tag?: string | null
    dateCreated?: Date | string
    lastModified?: Date | string
    flashCards?: FlashCardUncheckedCreateNestedManyWithoutFlashCardSetInput
    videos?: VideoUncheckedCreateNestedManyWithoutFlashCardSetInput
    practiceQuestions?: PracticeQuestionUncheckedCreateNestedManyWithoutFlashCardSetInput
  }

  export type FlashCardSetCreateOrConnectWithoutStudyGuideInput = {
    where: FlashCardSetWhereUniqueInput
    create: XOR<FlashCardSetCreateWithoutStudyGuideInput, FlashCardSetUncheckedCreateWithoutStudyGuideInput>
  }

  export type FlashCardSetCreateManyStudyGuideInputEnvelope = {
    data: FlashCardSetCreateManyStudyGuideInput | FlashCardSetCreateManyStudyGuideInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutStudyguidesInput = {
    update: XOR<UserUpdateWithoutStudyguidesInput, UserUncheckedUpdateWithoutStudyguidesInput>
    create: XOR<UserCreateWithoutStudyguidesInput, UserUncheckedCreateWithoutStudyguidesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutStudyguidesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutStudyguidesInput, UserUncheckedUpdateWithoutStudyguidesInput>
  }

  export type UserUpdateWithoutStudyguidesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateWithoutStudyguidesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FlashCardSetUpsertWithWhereUniqueWithoutStudyGuideInput = {
    where: FlashCardSetWhereUniqueInput
    update: XOR<FlashCardSetUpdateWithoutStudyGuideInput, FlashCardSetUncheckedUpdateWithoutStudyGuideInput>
    create: XOR<FlashCardSetCreateWithoutStudyGuideInput, FlashCardSetUncheckedCreateWithoutStudyGuideInput>
  }

  export type FlashCardSetUpdateWithWhereUniqueWithoutStudyGuideInput = {
    where: FlashCardSetWhereUniqueInput
    data: XOR<FlashCardSetUpdateWithoutStudyGuideInput, FlashCardSetUncheckedUpdateWithoutStudyGuideInput>
  }

  export type FlashCardSetUpdateManyWithWhereWithoutStudyGuideInput = {
    where: FlashCardSetScalarWhereInput
    data: XOR<FlashCardSetUpdateManyMutationInput, FlashCardSetUncheckedUpdateManyWithoutStudyGuideInput>
  }

  export type FlashCardSetScalarWhereInput = {
    AND?: FlashCardSetScalarWhereInput | FlashCardSetScalarWhereInput[]
    OR?: FlashCardSetScalarWhereInput[]
    NOT?: FlashCardSetScalarWhereInput | FlashCardSetScalarWhereInput[]
    id?: StringFilter<"FlashCardSet"> | string
    name?: StringFilter<"FlashCardSet"> | string
    tag?: StringNullableFilter<"FlashCardSet"> | string | null
    dateCreated?: DateTimeFilter<"FlashCardSet"> | Date | string
    lastModified?: DateTimeFilter<"FlashCardSet"> | Date | string
    studyGuideID?: StringFilter<"FlashCardSet"> | string
  }

  export type StudyGuideCreateWithoutFlashCardSetsInput = {
    id?: string
    tag?: string | null
    name: string
    dateCreated?: Date | string
    lastModified?: Date | string
    completedBy?: Date | string | null
    completed?: boolean
    user: UserCreateNestedOneWithoutStudyguidesInput
  }

  export type StudyGuideUncheckedCreateWithoutFlashCardSetsInput = {
    id?: string
    tag?: string | null
    name: string
    dateCreated?: Date | string
    lastModified?: Date | string
    completedBy?: Date | string | null
    completed?: boolean
    userID: string
  }

  export type StudyGuideCreateOrConnectWithoutFlashCardSetsInput = {
    where: StudyGuideWhereUniqueInput
    create: XOR<StudyGuideCreateWithoutFlashCardSetsInput, StudyGuideUncheckedCreateWithoutFlashCardSetsInput>
  }

  export type FlashCardCreateWithoutFlashCardSetInput = {
    id?: string
    frontContent: string
    backContent: string
    cardIndex: number
    learnedCount?: number
    lastLearned?: Date | string | null
    image?: string | null
  }

  export type FlashCardUncheckedCreateWithoutFlashCardSetInput = {
    id?: string
    frontContent: string
    backContent: string
    cardIndex: number
    learnedCount?: number
    lastLearned?: Date | string | null
    image?: string | null
  }

  export type FlashCardCreateOrConnectWithoutFlashCardSetInput = {
    where: FlashCardWhereUniqueInput
    create: XOR<FlashCardCreateWithoutFlashCardSetInput, FlashCardUncheckedCreateWithoutFlashCardSetInput>
  }

  export type FlashCardCreateManyFlashCardSetInputEnvelope = {
    data: FlashCardCreateManyFlashCardSetInput | FlashCardCreateManyFlashCardSetInput[]
    skipDuplicates?: boolean
  }

  export type VideoCreateWithoutFlashCardSetInput = {
    id?: string
    dateCreated?: Date | string
    watched?: boolean
    url: string
  }

  export type VideoUncheckedCreateWithoutFlashCardSetInput = {
    id?: string
    dateCreated?: Date | string
    watched?: boolean
    url: string
  }

  export type VideoCreateOrConnectWithoutFlashCardSetInput = {
    where: VideoWhereUniqueInput
    create: XOR<VideoCreateWithoutFlashCardSetInput, VideoUncheckedCreateWithoutFlashCardSetInput>
  }

  export type VideoCreateManyFlashCardSetInputEnvelope = {
    data: VideoCreateManyFlashCardSetInput | VideoCreateManyFlashCardSetInput[]
    skipDuplicates?: boolean
  }

  export type PracticeQuestionCreateWithoutFlashCardSetInput = {
    id?: string
    question: string
    answer?: PracticeQuestionCreateanswerInput | string[]
    options?: NullableJsonNullValueInput | InputJsonValue
    timesAnsweredRight?: number
    timesAnsweredWrong?: number
    image?: string | null
    type?: $Enums.QuestionType
  }

  export type PracticeQuestionUncheckedCreateWithoutFlashCardSetInput = {
    id?: string
    question: string
    answer?: PracticeQuestionCreateanswerInput | string[]
    options?: NullableJsonNullValueInput | InputJsonValue
    timesAnsweredRight?: number
    timesAnsweredWrong?: number
    image?: string | null
    type?: $Enums.QuestionType
  }

  export type PracticeQuestionCreateOrConnectWithoutFlashCardSetInput = {
    where: PracticeQuestionWhereUniqueInput
    create: XOR<PracticeQuestionCreateWithoutFlashCardSetInput, PracticeQuestionUncheckedCreateWithoutFlashCardSetInput>
  }

  export type PracticeQuestionCreateManyFlashCardSetInputEnvelope = {
    data: PracticeQuestionCreateManyFlashCardSetInput | PracticeQuestionCreateManyFlashCardSetInput[]
    skipDuplicates?: boolean
  }

  export type StudyGuideUpsertWithoutFlashCardSetsInput = {
    update: XOR<StudyGuideUpdateWithoutFlashCardSetsInput, StudyGuideUncheckedUpdateWithoutFlashCardSetsInput>
    create: XOR<StudyGuideCreateWithoutFlashCardSetsInput, StudyGuideUncheckedCreateWithoutFlashCardSetsInput>
    where?: StudyGuideWhereInput
  }

  export type StudyGuideUpdateToOneWithWhereWithoutFlashCardSetsInput = {
    where?: StudyGuideWhereInput
    data: XOR<StudyGuideUpdateWithoutFlashCardSetsInput, StudyGuideUncheckedUpdateWithoutFlashCardSetsInput>
  }

  export type StudyGuideUpdateWithoutFlashCardSetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    tag?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    lastModified?: DateTimeFieldUpdateOperationsInput | Date | string
    completedBy?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completed?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutStudyguidesNestedInput
  }

  export type StudyGuideUncheckedUpdateWithoutFlashCardSetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    tag?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    lastModified?: DateTimeFieldUpdateOperationsInput | Date | string
    completedBy?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completed?: BoolFieldUpdateOperationsInput | boolean
    userID?: StringFieldUpdateOperationsInput | string
  }

  export type FlashCardUpsertWithWhereUniqueWithoutFlashCardSetInput = {
    where: FlashCardWhereUniqueInput
    update: XOR<FlashCardUpdateWithoutFlashCardSetInput, FlashCardUncheckedUpdateWithoutFlashCardSetInput>
    create: XOR<FlashCardCreateWithoutFlashCardSetInput, FlashCardUncheckedCreateWithoutFlashCardSetInput>
  }

  export type FlashCardUpdateWithWhereUniqueWithoutFlashCardSetInput = {
    where: FlashCardWhereUniqueInput
    data: XOR<FlashCardUpdateWithoutFlashCardSetInput, FlashCardUncheckedUpdateWithoutFlashCardSetInput>
  }

  export type FlashCardUpdateManyWithWhereWithoutFlashCardSetInput = {
    where: FlashCardScalarWhereInput
    data: XOR<FlashCardUpdateManyMutationInput, FlashCardUncheckedUpdateManyWithoutFlashCardSetInput>
  }

  export type FlashCardScalarWhereInput = {
    AND?: FlashCardScalarWhereInput | FlashCardScalarWhereInput[]
    OR?: FlashCardScalarWhereInput[]
    NOT?: FlashCardScalarWhereInput | FlashCardScalarWhereInput[]
    id?: StringFilter<"FlashCard"> | string
    frontContent?: StringFilter<"FlashCard"> | string
    backContent?: StringFilter<"FlashCard"> | string
    cardIndex?: IntFilter<"FlashCard"> | number
    flashCardSetID?: StringFilter<"FlashCard"> | string
    learnedCount?: IntFilter<"FlashCard"> | number
    lastLearned?: DateTimeNullableFilter<"FlashCard"> | Date | string | null
    image?: StringNullableFilter<"FlashCard"> | string | null
  }

  export type VideoUpsertWithWhereUniqueWithoutFlashCardSetInput = {
    where: VideoWhereUniqueInput
    update: XOR<VideoUpdateWithoutFlashCardSetInput, VideoUncheckedUpdateWithoutFlashCardSetInput>
    create: XOR<VideoCreateWithoutFlashCardSetInput, VideoUncheckedCreateWithoutFlashCardSetInput>
  }

  export type VideoUpdateWithWhereUniqueWithoutFlashCardSetInput = {
    where: VideoWhereUniqueInput
    data: XOR<VideoUpdateWithoutFlashCardSetInput, VideoUncheckedUpdateWithoutFlashCardSetInput>
  }

  export type VideoUpdateManyWithWhereWithoutFlashCardSetInput = {
    where: VideoScalarWhereInput
    data: XOR<VideoUpdateManyMutationInput, VideoUncheckedUpdateManyWithoutFlashCardSetInput>
  }

  export type VideoScalarWhereInput = {
    AND?: VideoScalarWhereInput | VideoScalarWhereInput[]
    OR?: VideoScalarWhereInput[]
    NOT?: VideoScalarWhereInput | VideoScalarWhereInput[]
    id?: StringFilter<"Video"> | string
    flashCardSetID?: StringFilter<"Video"> | string
    dateCreated?: DateTimeFilter<"Video"> | Date | string
    watched?: BoolFilter<"Video"> | boolean
    url?: StringFilter<"Video"> | string
  }

  export type PracticeQuestionUpsertWithWhereUniqueWithoutFlashCardSetInput = {
    where: PracticeQuestionWhereUniqueInput
    update: XOR<PracticeQuestionUpdateWithoutFlashCardSetInput, PracticeQuestionUncheckedUpdateWithoutFlashCardSetInput>
    create: XOR<PracticeQuestionCreateWithoutFlashCardSetInput, PracticeQuestionUncheckedCreateWithoutFlashCardSetInput>
  }

  export type PracticeQuestionUpdateWithWhereUniqueWithoutFlashCardSetInput = {
    where: PracticeQuestionWhereUniqueInput
    data: XOR<PracticeQuestionUpdateWithoutFlashCardSetInput, PracticeQuestionUncheckedUpdateWithoutFlashCardSetInput>
  }

  export type PracticeQuestionUpdateManyWithWhereWithoutFlashCardSetInput = {
    where: PracticeQuestionScalarWhereInput
    data: XOR<PracticeQuestionUpdateManyMutationInput, PracticeQuestionUncheckedUpdateManyWithoutFlashCardSetInput>
  }

  export type PracticeQuestionScalarWhereInput = {
    AND?: PracticeQuestionScalarWhereInput | PracticeQuestionScalarWhereInput[]
    OR?: PracticeQuestionScalarWhereInput[]
    NOT?: PracticeQuestionScalarWhereInput | PracticeQuestionScalarWhereInput[]
    id?: StringFilter<"PracticeQuestion"> | string
    flashCardSetID?: StringFilter<"PracticeQuestion"> | string
    question?: StringFilter<"PracticeQuestion"> | string
    answer?: StringNullableListFilter<"PracticeQuestion">
    options?: JsonNullableFilter<"PracticeQuestion">
    timesAnsweredRight?: IntFilter<"PracticeQuestion"> | number
    timesAnsweredWrong?: IntFilter<"PracticeQuestion"> | number
    image?: StringNullableFilter<"PracticeQuestion"> | string | null
    type?: EnumQuestionTypeFilter<"PracticeQuestion"> | $Enums.QuestionType
  }

  export type FlashCardSetCreateWithoutFlashCardsInput = {
    id?: string
    name: string
    tag?: string | null
    dateCreated?: Date | string
    lastModified?: Date | string
    studyGuide: StudyGuideCreateNestedOneWithoutFlashCardSetsInput
    videos?: VideoCreateNestedManyWithoutFlashCardSetInput
    practiceQuestions?: PracticeQuestionCreateNestedManyWithoutFlashCardSetInput
  }

  export type FlashCardSetUncheckedCreateWithoutFlashCardsInput = {
    id?: string
    name: string
    tag?: string | null
    dateCreated?: Date | string
    lastModified?: Date | string
    studyGuideID: string
    videos?: VideoUncheckedCreateNestedManyWithoutFlashCardSetInput
    practiceQuestions?: PracticeQuestionUncheckedCreateNestedManyWithoutFlashCardSetInput
  }

  export type FlashCardSetCreateOrConnectWithoutFlashCardsInput = {
    where: FlashCardSetWhereUniqueInput
    create: XOR<FlashCardSetCreateWithoutFlashCardsInput, FlashCardSetUncheckedCreateWithoutFlashCardsInput>
  }

  export type FlashCardSetUpsertWithoutFlashCardsInput = {
    update: XOR<FlashCardSetUpdateWithoutFlashCardsInput, FlashCardSetUncheckedUpdateWithoutFlashCardsInput>
    create: XOR<FlashCardSetCreateWithoutFlashCardsInput, FlashCardSetUncheckedCreateWithoutFlashCardsInput>
    where?: FlashCardSetWhereInput
  }

  export type FlashCardSetUpdateToOneWithWhereWithoutFlashCardsInput = {
    where?: FlashCardSetWhereInput
    data: XOR<FlashCardSetUpdateWithoutFlashCardsInput, FlashCardSetUncheckedUpdateWithoutFlashCardsInput>
  }

  export type FlashCardSetUpdateWithoutFlashCardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    tag?: NullableStringFieldUpdateOperationsInput | string | null
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    lastModified?: DateTimeFieldUpdateOperationsInput | Date | string
    studyGuide?: StudyGuideUpdateOneRequiredWithoutFlashCardSetsNestedInput
    videos?: VideoUpdateManyWithoutFlashCardSetNestedInput
    practiceQuestions?: PracticeQuestionUpdateManyWithoutFlashCardSetNestedInput
  }

  export type FlashCardSetUncheckedUpdateWithoutFlashCardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    tag?: NullableStringFieldUpdateOperationsInput | string | null
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    lastModified?: DateTimeFieldUpdateOperationsInput | Date | string
    studyGuideID?: StringFieldUpdateOperationsInput | string
    videos?: VideoUncheckedUpdateManyWithoutFlashCardSetNestedInput
    practiceQuestions?: PracticeQuestionUncheckedUpdateManyWithoutFlashCardSetNestedInput
  }

  export type FlashCardSetCreateWithoutVideosInput = {
    id?: string
    name: string
    tag?: string | null
    dateCreated?: Date | string
    lastModified?: Date | string
    studyGuide: StudyGuideCreateNestedOneWithoutFlashCardSetsInput
    flashCards?: FlashCardCreateNestedManyWithoutFlashCardSetInput
    practiceQuestions?: PracticeQuestionCreateNestedManyWithoutFlashCardSetInput
  }

  export type FlashCardSetUncheckedCreateWithoutVideosInput = {
    id?: string
    name: string
    tag?: string | null
    dateCreated?: Date | string
    lastModified?: Date | string
    studyGuideID: string
    flashCards?: FlashCardUncheckedCreateNestedManyWithoutFlashCardSetInput
    practiceQuestions?: PracticeQuestionUncheckedCreateNestedManyWithoutFlashCardSetInput
  }

  export type FlashCardSetCreateOrConnectWithoutVideosInput = {
    where: FlashCardSetWhereUniqueInput
    create: XOR<FlashCardSetCreateWithoutVideosInput, FlashCardSetUncheckedCreateWithoutVideosInput>
  }

  export type FlashCardSetUpsertWithoutVideosInput = {
    update: XOR<FlashCardSetUpdateWithoutVideosInput, FlashCardSetUncheckedUpdateWithoutVideosInput>
    create: XOR<FlashCardSetCreateWithoutVideosInput, FlashCardSetUncheckedCreateWithoutVideosInput>
    where?: FlashCardSetWhereInput
  }

  export type FlashCardSetUpdateToOneWithWhereWithoutVideosInput = {
    where?: FlashCardSetWhereInput
    data: XOR<FlashCardSetUpdateWithoutVideosInput, FlashCardSetUncheckedUpdateWithoutVideosInput>
  }

  export type FlashCardSetUpdateWithoutVideosInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    tag?: NullableStringFieldUpdateOperationsInput | string | null
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    lastModified?: DateTimeFieldUpdateOperationsInput | Date | string
    studyGuide?: StudyGuideUpdateOneRequiredWithoutFlashCardSetsNestedInput
    flashCards?: FlashCardUpdateManyWithoutFlashCardSetNestedInput
    practiceQuestions?: PracticeQuestionUpdateManyWithoutFlashCardSetNestedInput
  }

  export type FlashCardSetUncheckedUpdateWithoutVideosInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    tag?: NullableStringFieldUpdateOperationsInput | string | null
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    lastModified?: DateTimeFieldUpdateOperationsInput | Date | string
    studyGuideID?: StringFieldUpdateOperationsInput | string
    flashCards?: FlashCardUncheckedUpdateManyWithoutFlashCardSetNestedInput
    practiceQuestions?: PracticeQuestionUncheckedUpdateManyWithoutFlashCardSetNestedInput
  }

  export type FlashCardSetCreateWithoutPracticeQuestionsInput = {
    id?: string
    name: string
    tag?: string | null
    dateCreated?: Date | string
    lastModified?: Date | string
    studyGuide: StudyGuideCreateNestedOneWithoutFlashCardSetsInput
    flashCards?: FlashCardCreateNestedManyWithoutFlashCardSetInput
    videos?: VideoCreateNestedManyWithoutFlashCardSetInput
  }

  export type FlashCardSetUncheckedCreateWithoutPracticeQuestionsInput = {
    id?: string
    name: string
    tag?: string | null
    dateCreated?: Date | string
    lastModified?: Date | string
    studyGuideID: string
    flashCards?: FlashCardUncheckedCreateNestedManyWithoutFlashCardSetInput
    videos?: VideoUncheckedCreateNestedManyWithoutFlashCardSetInput
  }

  export type FlashCardSetCreateOrConnectWithoutPracticeQuestionsInput = {
    where: FlashCardSetWhereUniqueInput
    create: XOR<FlashCardSetCreateWithoutPracticeQuestionsInput, FlashCardSetUncheckedCreateWithoutPracticeQuestionsInput>
  }

  export type FlashCardSetUpsertWithoutPracticeQuestionsInput = {
    update: XOR<FlashCardSetUpdateWithoutPracticeQuestionsInput, FlashCardSetUncheckedUpdateWithoutPracticeQuestionsInput>
    create: XOR<FlashCardSetCreateWithoutPracticeQuestionsInput, FlashCardSetUncheckedCreateWithoutPracticeQuestionsInput>
    where?: FlashCardSetWhereInput
  }

  export type FlashCardSetUpdateToOneWithWhereWithoutPracticeQuestionsInput = {
    where?: FlashCardSetWhereInput
    data: XOR<FlashCardSetUpdateWithoutPracticeQuestionsInput, FlashCardSetUncheckedUpdateWithoutPracticeQuestionsInput>
  }

  export type FlashCardSetUpdateWithoutPracticeQuestionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    tag?: NullableStringFieldUpdateOperationsInput | string | null
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    lastModified?: DateTimeFieldUpdateOperationsInput | Date | string
    studyGuide?: StudyGuideUpdateOneRequiredWithoutFlashCardSetsNestedInput
    flashCards?: FlashCardUpdateManyWithoutFlashCardSetNestedInput
    videos?: VideoUpdateManyWithoutFlashCardSetNestedInput
  }

  export type FlashCardSetUncheckedUpdateWithoutPracticeQuestionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    tag?: NullableStringFieldUpdateOperationsInput | string | null
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    lastModified?: DateTimeFieldUpdateOperationsInput | Date | string
    studyGuideID?: StringFieldUpdateOperationsInput | string
    flashCards?: FlashCardUncheckedUpdateManyWithoutFlashCardSetNestedInput
    videos?: VideoUncheckedUpdateManyWithoutFlashCardSetNestedInput
  }

  export type StudyGuideCreateManyUserInput = {
    id?: string
    tag?: string | null
    name: string
    dateCreated?: Date | string
    lastModified?: Date | string
    completedBy?: Date | string | null
    completed?: boolean
  }

  export type StudyGuideUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    tag?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    lastModified?: DateTimeFieldUpdateOperationsInput | Date | string
    completedBy?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completed?: BoolFieldUpdateOperationsInput | boolean
    flashCardSets?: FlashCardSetUpdateManyWithoutStudyGuideNestedInput
  }

  export type StudyGuideUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    tag?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    lastModified?: DateTimeFieldUpdateOperationsInput | Date | string
    completedBy?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completed?: BoolFieldUpdateOperationsInput | boolean
    flashCardSets?: FlashCardSetUncheckedUpdateManyWithoutStudyGuideNestedInput
  }

  export type StudyGuideUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    tag?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    lastModified?: DateTimeFieldUpdateOperationsInput | Date | string
    completedBy?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completed?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FlashCardSetCreateManyStudyGuideInput = {
    id?: string
    name: string
    tag?: string | null
    dateCreated?: Date | string
    lastModified?: Date | string
  }

  export type FlashCardSetUpdateWithoutStudyGuideInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    tag?: NullableStringFieldUpdateOperationsInput | string | null
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    lastModified?: DateTimeFieldUpdateOperationsInput | Date | string
    flashCards?: FlashCardUpdateManyWithoutFlashCardSetNestedInput
    videos?: VideoUpdateManyWithoutFlashCardSetNestedInput
    practiceQuestions?: PracticeQuestionUpdateManyWithoutFlashCardSetNestedInput
  }

  export type FlashCardSetUncheckedUpdateWithoutStudyGuideInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    tag?: NullableStringFieldUpdateOperationsInput | string | null
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    lastModified?: DateTimeFieldUpdateOperationsInput | Date | string
    flashCards?: FlashCardUncheckedUpdateManyWithoutFlashCardSetNestedInput
    videos?: VideoUncheckedUpdateManyWithoutFlashCardSetNestedInput
    practiceQuestions?: PracticeQuestionUncheckedUpdateManyWithoutFlashCardSetNestedInput
  }

  export type FlashCardSetUncheckedUpdateManyWithoutStudyGuideInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    tag?: NullableStringFieldUpdateOperationsInput | string | null
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    lastModified?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FlashCardCreateManyFlashCardSetInput = {
    id?: string
    frontContent: string
    backContent: string
    cardIndex: number
    learnedCount?: number
    lastLearned?: Date | string | null
    image?: string | null
  }

  export type VideoCreateManyFlashCardSetInput = {
    id?: string
    dateCreated?: Date | string
    watched?: boolean
    url: string
  }

  export type PracticeQuestionCreateManyFlashCardSetInput = {
    id?: string
    question: string
    answer?: PracticeQuestionCreateanswerInput | string[]
    options?: NullableJsonNullValueInput | InputJsonValue
    timesAnsweredRight?: number
    timesAnsweredWrong?: number
    image?: string | null
    type?: $Enums.QuestionType
  }

  export type FlashCardUpdateWithoutFlashCardSetInput = {
    id?: StringFieldUpdateOperationsInput | string
    frontContent?: StringFieldUpdateOperationsInput | string
    backContent?: StringFieldUpdateOperationsInput | string
    cardIndex?: IntFieldUpdateOperationsInput | number
    learnedCount?: IntFieldUpdateOperationsInput | number
    lastLearned?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FlashCardUncheckedUpdateWithoutFlashCardSetInput = {
    id?: StringFieldUpdateOperationsInput | string
    frontContent?: StringFieldUpdateOperationsInput | string
    backContent?: StringFieldUpdateOperationsInput | string
    cardIndex?: IntFieldUpdateOperationsInput | number
    learnedCount?: IntFieldUpdateOperationsInput | number
    lastLearned?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FlashCardUncheckedUpdateManyWithoutFlashCardSetInput = {
    id?: StringFieldUpdateOperationsInput | string
    frontContent?: StringFieldUpdateOperationsInput | string
    backContent?: StringFieldUpdateOperationsInput | string
    cardIndex?: IntFieldUpdateOperationsInput | number
    learnedCount?: IntFieldUpdateOperationsInput | number
    lastLearned?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type VideoUpdateWithoutFlashCardSetInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    watched?: BoolFieldUpdateOperationsInput | boolean
    url?: StringFieldUpdateOperationsInput | string
  }

  export type VideoUncheckedUpdateWithoutFlashCardSetInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    watched?: BoolFieldUpdateOperationsInput | boolean
    url?: StringFieldUpdateOperationsInput | string
  }

  export type VideoUncheckedUpdateManyWithoutFlashCardSetInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    watched?: BoolFieldUpdateOperationsInput | boolean
    url?: StringFieldUpdateOperationsInput | string
  }

  export type PracticeQuestionUpdateWithoutFlashCardSetInput = {
    id?: StringFieldUpdateOperationsInput | string
    question?: StringFieldUpdateOperationsInput | string
    answer?: PracticeQuestionUpdateanswerInput | string[]
    options?: NullableJsonNullValueInput | InputJsonValue
    timesAnsweredRight?: IntFieldUpdateOperationsInput | number
    timesAnsweredWrong?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
  }

  export type PracticeQuestionUncheckedUpdateWithoutFlashCardSetInput = {
    id?: StringFieldUpdateOperationsInput | string
    question?: StringFieldUpdateOperationsInput | string
    answer?: PracticeQuestionUpdateanswerInput | string[]
    options?: NullableJsonNullValueInput | InputJsonValue
    timesAnsweredRight?: IntFieldUpdateOperationsInput | number
    timesAnsweredWrong?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
  }

  export type PracticeQuestionUncheckedUpdateManyWithoutFlashCardSetInput = {
    id?: StringFieldUpdateOperationsInput | string
    question?: StringFieldUpdateOperationsInput | string
    answer?: PracticeQuestionUpdateanswerInput | string[]
    options?: NullableJsonNullValueInput | InputJsonValue
    timesAnsweredRight?: IntFieldUpdateOperationsInput | number
    timesAnsweredWrong?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}