// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(cuid())

  // NextAuth stuff
  name          String?
  image         String?
  email         String    @unique // already indexed
  emailVerified DateTime?

  accounts Account[]
  sessions Session[]

  // Our stuff
  username    String?       // already indexed
  password    String? // hashed password
  dateCreated DateTime     @default(now())
  studyguides StudyGuide[]
  tags Tag[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model StudyGuide {
  id   String  @id @default(cuid())
  tags  Tag[]
  name String

  dateCreated  DateTime  @default(now())
  lastModified DateTime  @updatedAt
  completedBy  DateTime?
  completed    Boolean   @default(false)

  // this references the current users "id" (in the User model), and saves it to the field "userID" in this model
  user          User           @relation(fields: [userID], references: [id])
  userID        String
  flashCardSets FlashCardSet[]

  @@unique([name, userID]) // name_userID
  @@index([completed]) // want to be able to quickly find the completed ones and sort them
}

model Tag {
  id String @id @default(cuid())
  name String 
  
  color String

  studyGuide StudyGuide @relation(fields: [studyGuideID], references: [id])
  studyGuideID        String
  user          User           @relation(fields: [userID], references: [id])
  userID        String
  

  @@unique([name, userID])
}

model FlashCardSet {
  id           String   @id @default(cuid())
  name         String
  tag          String?
  dateCreated  DateTime @default(now())
  lastModified DateTime @updatedAt

  completed Boolean @default(false)

  studyGuide   StudyGuide @relation(fields: [studyGuideID], references: [id])
  studyGuideID String

  flashCards        FlashCard[]
  videos            Video[]
  practiceQuestions PracticeQuestion[]

  @@unique([name, studyGuideID]) // name_studyGuideID
  @@index([tag])
}

model FlashCard {
  id           String @id @default(cuid())
  frontContent String
  backContent  String

  dateCreated DateTime @default(now())

  flashCardSet   FlashCardSet @relation(fields: [flashCardSetID], references: [id])
  flashCardSetID String

  learnedCount Int       @default(0)
  lastLearned  DateTime?
  image        String?

  @@index([flashCardSetID]) // not @unique because flashcardsetID should not be unique but should have an index
}

model Video {
  id String @id @default(cuid())

  flashCardSet   FlashCardSet @relation(fields: [flashCardSetID], references: [id])
  flashCardSetID String

  dateCreated DateTime @default(now())
  watched     Boolean  @default(false)

  url String

  @@index([flashCardSetID])
}

model PracticeQuestion {
  id String @id @default(cuid())

  flashCardSet   FlashCardSet @relation(fields: [flashCardSetID], references: [id])
  flashCardSetID String

  question String
  answer   String[] // if written response, only input 1 string
  options  Json? // only for multipleChoice/multipleSelect, else just input a ""

  timesAnsweredRight Int     @default(0)
  timesAnsweredWrong Int     @default(0)
  image              String?

  type QuestionType @default(writtenResponse)

  @@index([flashCardSetID])
}

enum QuestionType {
  writtenResponse
  multipleChoice
  multipleSelect
}
